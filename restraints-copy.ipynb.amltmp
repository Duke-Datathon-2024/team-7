{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "pd.set_option('display.max_rows', 100)\n",
        "pd.set_option('display.max_columns', 50)\n",
        "\n",
        "\n",
        "physicalrestraints= \"downloaded_data/bq-results-20240413-184136-1713033859770.csv\"\n",
        "\n",
        "physical= pd.read_csv(physicalrestraints)\n",
        "physical.head(10)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 16,
          "data": {
            "text/plain": "   subject_id   hadm_id        date Non_Violent_Restraints  \\\n0    10001884  26184834  2131-01-11                    NaN   \n1    10001884  26184834  2131-01-12                    NaN   \n2    10001884  26184834  2131-01-13                    NaN   \n3    10001884  26184834  2131-01-14                    NaN   \n4    10001884  26184834  2131-01-15                    NaN   \n5    10001884  26184834  2131-01-16                    NaN   \n6    10001884  26184834  2131-01-17                    NaN   \n7    10001884  26184834  2131-01-18                    NaN   \n8    10001884  26184834  2131-01-19                    NaN   \n9    10002013  23581541  2160-05-18                    NaN   \n\n  Non_Violent_Restraints_Ordered  \\\n0                            NaN   \n1                            NaN   \n2                            NaN   \n3                            NaN   \n4                            NaN   \n5                            NaN   \n6                            NaN   \n7                            NaN   \n8                            NaN   \n9                            NaN   \n\n  Reason_for_Restraint_Acute_Medical_Surgical_V1  \\\n0                                            NaN   \n1                                            NaN   \n2                                            NaN   \n3                                            NaN   \n4                                            NaN   \n5                                            NaN   \n6                                            NaN   \n7                                            NaN   \n8                                            NaN   \n9                                            NaN   \n\n  Reason_for_Restraint_Behavioral_V1 Reason_for_Restraint_Non_violent  \\\n0                                NaN           Treatment interference   \n1                                NaN           Treatment interference   \n2                                NaN           Treatment interference   \n3                                NaN           Treatment interference   \n4                                NaN           Treatment interference   \n5                                NaN           Treatment interference   \n6                                NaN           Treatment interference   \n7                                NaN           Treatment interference   \n8                                NaN           Treatment interference   \n9                                NaN           Treatment interference   \n\n  Reason_for_Restraint_Violent Reason_for_Restraint_Seclusion_Violent  \\\n0                          NaN                                    NaN   \n1                          NaN                                    NaN   \n2                          NaN                                    NaN   \n3                          NaN                                    NaN   \n4                          NaN                                    NaN   \n5                          NaN                                    NaN   \n6                          NaN                                    NaN   \n7                          NaN                                    NaN   \n8                          NaN                                    NaN   \n9                          NaN                                    NaN   \n\n  Reason_for_Restraints_Non_Violent Restraint_Non_violent  \\\n0                               NaN                   On    \n1                               NaN                   On    \n2                               NaN                   On    \n3                               NaN                   On    \n4                               NaN                   On    \n5                               NaN                   On    \n6                               NaN                   On    \n7                               NaN                   On    \n8                               NaN                   On    \n9                               NaN                   On    \n\n  Restraint_Device_Non_Violent Restraint_Device_Non_violent_1  \\\n0                          NaN                      Soft limb   \n1                          NaN                      Soft limb   \n2                          NaN                      Soft limb   \n3                          NaN                      Soft limb   \n4                          NaN                      Soft limb   \n5                          NaN                      Soft limb   \n6                          NaN                      Soft limb   \n7                          NaN                      Soft limb   \n8                          NaN                      Soft limb   \n9                          NaN                      Soft limb   \n\n  Restraint_Device_Violent Restraint_Location Restraint_Location_V1  \\\n0                      NaN          Both arms                   NaN   \n1                      NaN          Both arms                   NaN   \n2                      NaN          Both arms                   NaN   \n3                      NaN          Both arms                   NaN   \n4                      NaN          Both arms                   NaN   \n5                      NaN          Both arms                   NaN   \n6                      NaN          Both arms                   NaN   \n7                      NaN          Both arms                   NaN   \n8                      NaN          Both arms                   NaN   \n9                      NaN          Both arms                   NaN   \n\n  Restraint_Location_V2 Restraint_Ordered_Non_violent Restraint_Type  \\\n0                   NaN                          Done            NaN   \n1                   NaN                          Done            NaN   \n2                   NaN                          Done            NaN   \n3                   NaN                          Done            NaN   \n4                   NaN                          Done            NaN   \n5                   NaN                          Done            NaN   \n6                   NaN                          Done            NaN   \n7                   NaN                          Done            NaN   \n8                   NaN                          Done            NaN   \n9                   NaN                          Done            NaN   \n\n  Restraint_Seclusion_Observer_Sheet Restraints_Violent Restraints_Evaluated  \\\n0                                NaN                NaN            Continued   \n1                                NaN                NaN            Continued   \n2                                NaN                NaN            Reapplied   \n3                                NaN                NaN            Reapplied   \n4                                NaN                NaN            Continued   \n5                                NaN                NaN            Continued   \n6                                NaN                NaN            Continued   \n7                                NaN                NaN            Continued   \n8                                NaN                NaN            Continued   \n9                                NaN                NaN         Discontinued   \n\n  Restraints_Evaluated_V1 Restraints_Evaluated_V2  Restraints_Ordered  \\\n0                     NaN                     NaN                 NaN   \n1                     NaN                     NaN                 NaN   \n2                     NaN                     NaN                 NaN   \n3                     NaN                     NaN                 NaN   \n4                     NaN                     NaN                 NaN   \n5                     NaN                     NaN                 NaN   \n6                     NaN                     NaN                 NaN   \n7                     NaN                     NaN                 NaN   \n8                     NaN                     NaN                 NaN   \n9                     NaN                     NaN                 NaN   \n\n  Restraints_Ordered_Violent  Safety_Restraints_NCP_Expected_outcomes  \\\n0                        NaN                                      NaN   \n1                        NaN                                      NaN   \n2                        NaN                                      NaN   \n3                        NaN                                      NaN   \n4                        NaN                                      NaN   \n5                        NaN                                      NaN   \n6                        NaN                                      NaN   \n7                        NaN                                      NaN   \n8                        NaN                                      NaN   \n9                        NaN                                      NaN   \n\n   Safety_Restraints_NCP_Goal  Safety_Restraints_NCP_Interventions  \\\n0                         NaN                                  NaN   \n1                         NaN                                  NaN   \n2                         NaN                                  NaN   \n3                         NaN                                  NaN   \n4                         NaN                                  NaN   \n5                         NaN                                  NaN   \n6                         NaN                                  NaN   \n7                         NaN                                  NaN   \n8                         NaN                                  NaN   \n9                         NaN                                  NaN   \n\n   Safety_Restraints_NCP_Outcomes_met  Safety_Restraints_NCP_Plan_revised  \\\n0                                 NaN                                 NaN   \n1                                 NaN                                 NaN   \n2                                 NaN                                 NaN   \n3                                 NaN                                 NaN   \n4                                 NaN                                 NaN   \n5                                 NaN                                 NaN   \n6                                 NaN                                 NaN   \n7                                 NaN                                 NaN   \n8                                 NaN                                 NaN   \n9                                 NaN                                 NaN   \n\n   Safety_Restraints_NCP_Problem_resolved  Side_Rails_Restraint  \\\n0                                     NaN                   NaN   \n1                                     NaN                   NaN   \n2                                     NaN                   NaN   \n3                                     NaN                   NaN   \n4                                     NaN                   NaN   \n5                                     NaN                   NaN   \n6                                     NaN                   NaN   \n7                                     NaN                   NaN   \n8                                     NaN                   NaN   \n9                                     NaN                   NaN   \n\n  Violent_Restraints Violent_Restraints_Ordered insurance language  \\\n0                NaN                        NaN  Medicare  ENGLISH   \n1                NaN                        NaN  Medicare  ENGLISH   \n2                NaN                        NaN  Medicare  ENGLISH   \n3                NaN                        NaN  Medicare  ENGLISH   \n4                NaN                        NaN  Medicare  ENGLISH   \n5                NaN                        NaN  Medicare  ENGLISH   \n6                NaN                        NaN  Medicare  ENGLISH   \n7                NaN                        NaN  Medicare  ENGLISH   \n8                NaN                        NaN  Medicare  ENGLISH   \n9                NaN                        NaN  Medicare  ENGLISH   \n\n  marital_status                    race            deathtime  \n0        MARRIED  BLACK/AFRICAN AMERICAN  2131-01-20 05:15:00  \n1        MARRIED  BLACK/AFRICAN AMERICAN  2131-01-20 05:15:00  \n2        MARRIED  BLACK/AFRICAN AMERICAN  2131-01-20 05:15:00  \n3        MARRIED  BLACK/AFRICAN AMERICAN  2131-01-20 05:15:00  \n4        MARRIED  BLACK/AFRICAN AMERICAN  2131-01-20 05:15:00  \n5        MARRIED  BLACK/AFRICAN AMERICAN  2131-01-20 05:15:00  \n6        MARRIED  BLACK/AFRICAN AMERICAN  2131-01-20 05:15:00  \n7        MARRIED  BLACK/AFRICAN AMERICAN  2131-01-20 05:15:00  \n8        MARRIED  BLACK/AFRICAN AMERICAN  2131-01-20 05:15:00  \n9         SINGLE                   OTHER                  NaN  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>date</th>\n      <th>Non_Violent_Restraints</th>\n      <th>Non_Violent_Restraints_Ordered</th>\n      <th>Reason_for_Restraint_Acute_Medical_Surgical_V1</th>\n      <th>Reason_for_Restraint_Behavioral_V1</th>\n      <th>Reason_for_Restraint_Non_violent</th>\n      <th>Reason_for_Restraint_Violent</th>\n      <th>Reason_for_Restraint_Seclusion_Violent</th>\n      <th>Reason_for_Restraints_Non_Violent</th>\n      <th>Restraint_Non_violent</th>\n      <th>Restraint_Device_Non_Violent</th>\n      <th>Restraint_Device_Non_violent_1</th>\n      <th>Restraint_Device_Violent</th>\n      <th>Restraint_Location</th>\n      <th>Restraint_Location_V1</th>\n      <th>Restraint_Location_V2</th>\n      <th>Restraint_Ordered_Non_violent</th>\n      <th>Restraint_Type</th>\n      <th>Restraint_Seclusion_Observer_Sheet</th>\n      <th>Restraints_Violent</th>\n      <th>Restraints_Evaluated</th>\n      <th>Restraints_Evaluated_V1</th>\n      <th>Restraints_Evaluated_V2</th>\n      <th>Restraints_Ordered</th>\n      <th>Restraints_Ordered_Violent</th>\n      <th>Safety_Restraints_NCP_Expected_outcomes</th>\n      <th>Safety_Restraints_NCP_Goal</th>\n      <th>Safety_Restraints_NCP_Interventions</th>\n      <th>Safety_Restraints_NCP_Outcomes_met</th>\n      <th>Safety_Restraints_NCP_Plan_revised</th>\n      <th>Safety_Restraints_NCP_Problem_resolved</th>\n      <th>Side_Rails_Restraint</th>\n      <th>Violent_Restraints</th>\n      <th>Violent_Restraints_Ordered</th>\n      <th>insurance</th>\n      <th>language</th>\n      <th>marital_status</th>\n      <th>race</th>\n      <th>deathtime</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-11</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Continued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>BLACK/AFRICAN AMERICAN</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-12</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Continued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>BLACK/AFRICAN AMERICAN</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-13</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Reapplied</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>BLACK/AFRICAN AMERICAN</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-14</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Reapplied</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>BLACK/AFRICAN AMERICAN</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-15</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Continued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>BLACK/AFRICAN AMERICAN</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-16</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Continued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>BLACK/AFRICAN AMERICAN</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-17</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Continued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>BLACK/AFRICAN AMERICAN</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-18</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Continued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>BLACK/AFRICAN AMERICAN</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-19</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Continued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>BLACK/AFRICAN AMERICAN</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10002013</td>\n      <td>23581541</td>\n      <td>2160-05-18</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Discontinued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>OTHER</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 16,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713108972220
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# unique patients with restraints\n",
        "physical['hadm_id'].nunique()\n",
        "# 27417"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 3,
          "data": {
            "text/plain": "27417"
          },
          "metadata": {}
        }
      ],
      "execution_count": 3,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713108026299
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mapping race\n",
        "physical['race'] = physical['race'].str.lower()\n",
        "\n",
        "# Define the mapping of values to be replaced, with lowercase keys\n",
        "race_mapping = {\n",
        "    'asian - asian indian': 'Asian',\n",
        "    'asian - chinese': 'Asian',\n",
        "    'asian - korean': 'Asian',\n",
        "    'asian': \"Asian\", \n",
        "    'asian - south east asian': 'Asian',\n",
        "    'black/african': 'Black/African American',\n",
        "    'black/cape verdean': 'Black/African American',\n",
        "    'black/caribbean island': 'Black/African American',\n",
        "    'black/african american' : 'Black/African American',\n",
        "    'hispanic/latino' : 'Hispanic/Latino', \n",
        "    'hispanic/latino - central american': 'Hispanic/Latino',\n",
        "    'hispanic/latino - columbian': 'Hispanic/Latino',\n",
        "    'hispanic/latino - cuban': 'Hispanic/Latino',\n",
        "    'hispanic/latino - dominican': 'Hispanic/Latino',\n",
        "    'hispanic/latino - guatemalan': 'Hispanic/Latino',\n",
        "    'hispanic/latino - honduran': 'Hispanic/Latino',\n",
        "    'hispanic/latino - mexican': 'Hispanic/Latino',\n",
        "    'hispanic/latino - puerto rican': 'Hispanic/Latino',\n",
        "    'hispanic/latino - salvadoran': 'Hispanic/Latino',\n",
        "    'multiple race/ethnicity': 'Other',\n",
        "    'patient declined to answer': 'Other',\n",
        "    'unable to obtain': 'Other',\n",
        "    'unknown': 'Other',\n",
        "    'other' : 'Other', \n",
        "    'portuguese': 'White',\n",
        "    'white - brazilian': 'White',\n",
        "    'white - eastern european': 'White',\n",
        "    'white - other european': 'White',\n",
        "    'white - russian': 'White',\n",
        "    'white' : 'White',\n",
        "    'american indian/alaska native': 'American Indian/Alaska Native',\n",
        "    'hispanic or latino' : \"Hispanic/Latino\", \n",
        "    'native hawaiian or other pacific islander': \"Native Hawaiian or Other Pacific Islander\", \n",
        "    'south american' : \"Hispanic/Latino\"\n",
        "}\n",
        "\n",
        "# Replace values in the 'race' column using the mapping\n",
        "physical['race'] = physical['race'].replace(race_mapping)\n",
        "\n",
        "# Display the modified DataFrame\n",
        "physical.head(10)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 29,
          "data": {
            "text/plain": "   subject_id   hadm_id        date Non_Violent_Restraints  \\\n0    10001884  26184834  2131-01-11                    NaN   \n1    10001884  26184834  2131-01-12                    NaN   \n2    10001884  26184834  2131-01-13                    NaN   \n3    10001884  26184834  2131-01-14                    NaN   \n4    10001884  26184834  2131-01-15                    NaN   \n5    10001884  26184834  2131-01-16                    NaN   \n6    10001884  26184834  2131-01-17                    NaN   \n7    10001884  26184834  2131-01-18                    NaN   \n8    10001884  26184834  2131-01-19                    NaN   \n9    10002013  23581541  2160-05-18                    NaN   \n\n  Non_Violent_Restraints_Ordered  \\\n0                            NaN   \n1                            NaN   \n2                            NaN   \n3                            NaN   \n4                            NaN   \n5                            NaN   \n6                            NaN   \n7                            NaN   \n8                            NaN   \n9                            NaN   \n\n  Reason_for_Restraint_Acute_Medical_Surgical_V1  \\\n0                                            NaN   \n1                                            NaN   \n2                                            NaN   \n3                                            NaN   \n4                                            NaN   \n5                                            NaN   \n6                                            NaN   \n7                                            NaN   \n8                                            NaN   \n9                                            NaN   \n\n  Reason_for_Restraint_Behavioral_V1 Reason_for_Restraint_Non_violent  \\\n0                                NaN           Treatment interference   \n1                                NaN           Treatment interference   \n2                                NaN           Treatment interference   \n3                                NaN           Treatment interference   \n4                                NaN           Treatment interference   \n5                                NaN           Treatment interference   \n6                                NaN           Treatment interference   \n7                                NaN           Treatment interference   \n8                                NaN           Treatment interference   \n9                                NaN           Treatment interference   \n\n  Reason_for_Restraint_Violent Reason_for_Restraint_Seclusion_Violent  \\\n0                          NaN                                    NaN   \n1                          NaN                                    NaN   \n2                          NaN                                    NaN   \n3                          NaN                                    NaN   \n4                          NaN                                    NaN   \n5                          NaN                                    NaN   \n6                          NaN                                    NaN   \n7                          NaN                                    NaN   \n8                          NaN                                    NaN   \n9                          NaN                                    NaN   \n\n  Reason_for_Restraints_Non_Violent Restraint_Non_violent  \\\n0                               NaN                   On    \n1                               NaN                   On    \n2                               NaN                   On    \n3                               NaN                   On    \n4                               NaN                   On    \n5                               NaN                   On    \n6                               NaN                   On    \n7                               NaN                   On    \n8                               NaN                   On    \n9                               NaN                   On    \n\n  Restraint_Device_Non_Violent Restraint_Device_Non_violent_1  \\\n0                          NaN                      Soft limb   \n1                          NaN                      Soft limb   \n2                          NaN                      Soft limb   \n3                          NaN                      Soft limb   \n4                          NaN                      Soft limb   \n5                          NaN                      Soft limb   \n6                          NaN                      Soft limb   \n7                          NaN                      Soft limb   \n8                          NaN                      Soft limb   \n9                          NaN                      Soft limb   \n\n  Restraint_Device_Violent Restraint_Location Restraint_Location_V1  \\\n0                      NaN          Both arms                   NaN   \n1                      NaN          Both arms                   NaN   \n2                      NaN          Both arms                   NaN   \n3                      NaN          Both arms                   NaN   \n4                      NaN          Both arms                   NaN   \n5                      NaN          Both arms                   NaN   \n6                      NaN          Both arms                   NaN   \n7                      NaN          Both arms                   NaN   \n8                      NaN          Both arms                   NaN   \n9                      NaN          Both arms                   NaN   \n\n  Restraint_Location_V2 Restraint_Ordered_Non_violent Restraint_Type  \\\n0                   NaN                          Done            NaN   \n1                   NaN                          Done            NaN   \n2                   NaN                          Done            NaN   \n3                   NaN                          Done            NaN   \n4                   NaN                          Done            NaN   \n5                   NaN                          Done            NaN   \n6                   NaN                          Done            NaN   \n7                   NaN                          Done            NaN   \n8                   NaN                          Done            NaN   \n9                   NaN                          Done            NaN   \n\n  Restraint_Seclusion_Observer_Sheet Restraints_Violent Restraints_Evaluated  \\\n0                                NaN                NaN            Continued   \n1                                NaN                NaN            Continued   \n2                                NaN                NaN            Reapplied   \n3                                NaN                NaN            Reapplied   \n4                                NaN                NaN            Continued   \n5                                NaN                NaN            Continued   \n6                                NaN                NaN            Continued   \n7                                NaN                NaN            Continued   \n8                                NaN                NaN            Continued   \n9                                NaN                NaN         Discontinued   \n\n  Restraints_Evaluated_V1 Restraints_Evaluated_V2  Restraints_Ordered  \\\n0                     NaN                     NaN                 NaN   \n1                     NaN                     NaN                 NaN   \n2                     NaN                     NaN                 NaN   \n3                     NaN                     NaN                 NaN   \n4                     NaN                     NaN                 NaN   \n5                     NaN                     NaN                 NaN   \n6                     NaN                     NaN                 NaN   \n7                     NaN                     NaN                 NaN   \n8                     NaN                     NaN                 NaN   \n9                     NaN                     NaN                 NaN   \n\n  Restraints_Ordered_Violent  Safety_Restraints_NCP_Expected_outcomes  \\\n0                        NaN                                      NaN   \n1                        NaN                                      NaN   \n2                        NaN                                      NaN   \n3                        NaN                                      NaN   \n4                        NaN                                      NaN   \n5                        NaN                                      NaN   \n6                        NaN                                      NaN   \n7                        NaN                                      NaN   \n8                        NaN                                      NaN   \n9                        NaN                                      NaN   \n\n   Safety_Restraints_NCP_Goal  Safety_Restraints_NCP_Interventions  \\\n0                         NaN                                  NaN   \n1                         NaN                                  NaN   \n2                         NaN                                  NaN   \n3                         NaN                                  NaN   \n4                         NaN                                  NaN   \n5                         NaN                                  NaN   \n6                         NaN                                  NaN   \n7                         NaN                                  NaN   \n8                         NaN                                  NaN   \n9                         NaN                                  NaN   \n\n   Safety_Restraints_NCP_Outcomes_met  Safety_Restraints_NCP_Plan_revised  \\\n0                                 NaN                                 NaN   \n1                                 NaN                                 NaN   \n2                                 NaN                                 NaN   \n3                                 NaN                                 NaN   \n4                                 NaN                                 NaN   \n5                                 NaN                                 NaN   \n6                                 NaN                                 NaN   \n7                                 NaN                                 NaN   \n8                                 NaN                                 NaN   \n9                                 NaN                                 NaN   \n\n   Safety_Restraints_NCP_Problem_resolved  Side_Rails_Restraint  \\\n0                                     NaN                   NaN   \n1                                     NaN                   NaN   \n2                                     NaN                   NaN   \n3                                     NaN                   NaN   \n4                                     NaN                   NaN   \n5                                     NaN                   NaN   \n6                                     NaN                   NaN   \n7                                     NaN                   NaN   \n8                                     NaN                   NaN   \n9                                     NaN                   NaN   \n\n  Violent_Restraints Violent_Restraints_Ordered insurance language  \\\n0                NaN                        NaN  Medicare  ENGLISH   \n1                NaN                        NaN  Medicare  ENGLISH   \n2                NaN                        NaN  Medicare  ENGLISH   \n3                NaN                        NaN  Medicare  ENGLISH   \n4                NaN                        NaN  Medicare  ENGLISH   \n5                NaN                        NaN  Medicare  ENGLISH   \n6                NaN                        NaN  Medicare  ENGLISH   \n7                NaN                        NaN  Medicare  ENGLISH   \n8                NaN                        NaN  Medicare  ENGLISH   \n9                NaN                        NaN  Medicare  ENGLISH   \n\n  marital_status                    race            deathtime  \n0        MARRIED  Black/African American  2131-01-20 05:15:00  \n1        MARRIED  Black/African American  2131-01-20 05:15:00  \n2        MARRIED  Black/African American  2131-01-20 05:15:00  \n3        MARRIED  Black/African American  2131-01-20 05:15:00  \n4        MARRIED  Black/African American  2131-01-20 05:15:00  \n5        MARRIED  Black/African American  2131-01-20 05:15:00  \n6        MARRIED  Black/African American  2131-01-20 05:15:00  \n7        MARRIED  Black/African American  2131-01-20 05:15:00  \n8        MARRIED  Black/African American  2131-01-20 05:15:00  \n9         SINGLE                   Other                  NaN  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>date</th>\n      <th>Non_Violent_Restraints</th>\n      <th>Non_Violent_Restraints_Ordered</th>\n      <th>Reason_for_Restraint_Acute_Medical_Surgical_V1</th>\n      <th>Reason_for_Restraint_Behavioral_V1</th>\n      <th>Reason_for_Restraint_Non_violent</th>\n      <th>Reason_for_Restraint_Violent</th>\n      <th>Reason_for_Restraint_Seclusion_Violent</th>\n      <th>Reason_for_Restraints_Non_Violent</th>\n      <th>Restraint_Non_violent</th>\n      <th>Restraint_Device_Non_Violent</th>\n      <th>Restraint_Device_Non_violent_1</th>\n      <th>Restraint_Device_Violent</th>\n      <th>Restraint_Location</th>\n      <th>Restraint_Location_V1</th>\n      <th>Restraint_Location_V2</th>\n      <th>Restraint_Ordered_Non_violent</th>\n      <th>Restraint_Type</th>\n      <th>Restraint_Seclusion_Observer_Sheet</th>\n      <th>Restraints_Violent</th>\n      <th>Restraints_Evaluated</th>\n      <th>Restraints_Evaluated_V1</th>\n      <th>Restraints_Evaluated_V2</th>\n      <th>Restraints_Ordered</th>\n      <th>Restraints_Ordered_Violent</th>\n      <th>Safety_Restraints_NCP_Expected_outcomes</th>\n      <th>Safety_Restraints_NCP_Goal</th>\n      <th>Safety_Restraints_NCP_Interventions</th>\n      <th>Safety_Restraints_NCP_Outcomes_met</th>\n      <th>Safety_Restraints_NCP_Plan_revised</th>\n      <th>Safety_Restraints_NCP_Problem_resolved</th>\n      <th>Side_Rails_Restraint</th>\n      <th>Violent_Restraints</th>\n      <th>Violent_Restraints_Ordered</th>\n      <th>insurance</th>\n      <th>language</th>\n      <th>marital_status</th>\n      <th>race</th>\n      <th>deathtime</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-11</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Continued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-12</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Continued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-13</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Reapplied</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-14</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Reapplied</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-15</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Continued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-16</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Continued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-17</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Continued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-18</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Continued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>2131-01-19</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Continued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n      <td>2131-01-20 05:15:00</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10002013</td>\n      <td>23581541</td>\n      <td>2160-05-18</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Treatment interference</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>On</td>\n      <td>NaN</td>\n      <td>Soft limb</td>\n      <td>NaN</td>\n      <td>Both arms</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Done</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Discontinued</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>Other</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 29,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713110252093
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Taking dataframe and calculating the number of restraint days\n",
        "physical_df=physical.copy()\n",
        "physical_df=physical.groupby('hadm_id').size().reset_index(name='restraintdays')\n",
        "\n",
        "# Merge with the original DataFrame to get the other columns\n",
        "physical_df = physical_df.merge(physical[['subject_id', 'hadm_id', 'insurance', 'language', 'marital_status', 'race', 'deathtime']].drop_duplicates(), on='hadm_id')\n",
        "\n",
        "# Reordering columns as per requirement\n",
        "physical_df = physical_df[['subject_id', 'hadm_id', 'restraintdays', 'insurance', 'language', 'marital_status', 'race', 'deathtime']]\n",
        "\n",
        "# Displaying the resulting DataFrame\n",
        "physical_df.head(10)\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 18,
          "data": {
            "text/plain": "   subject_id   hadm_id  restraintdays insurance language marital_status  \\\n0    14990224  20000147              2  Medicare  ENGLISH        MARRIED   \n1    16003661  20001305              3  Medicare  ENGLISH         SINGLE   \n2    10117812  20001770              1     Other  ENGLISH         SINGLE   \n3    10926139  20001811              3  Medicare  ENGLISH         SINGLE   \n4    18921218  20001976              1  Medicaid  ENGLISH         SINGLE   \n5    19476485  20002267              2  Medicare  ENGLISH         SINGLE   \n6    16230775  20002506              1     Other  ENGLISH            NaN   \n7    18596567  20002950              1     Other  ENGLISH         SINGLE   \n8    17656146  20003587              1  Medicare  ENGLISH        MARRIED   \n9    19657904  20004357              3  Medicare  ENGLISH        WIDOWED   \n\n                     race            deathtime  \n0                   White                  NaN  \n1                   White  2178-03-27 19:23:00  \n2                   White                  NaN  \n3                   White                  NaN  \n4                   White                  NaN  \n5  Black/African American                  NaN  \n6                   Other                  NaN  \n7                   White                  NaN  \n8  Black/African American  2146-04-18 02:15:00  \n9  Black/African American                  NaN  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>restraintdays</th>\n      <th>insurance</th>\n      <th>language</th>\n      <th>marital_status</th>\n      <th>race</th>\n      <th>deathtime</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>14990224</td>\n      <td>20000147</td>\n      <td>2</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>White</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>16003661</td>\n      <td>20001305</td>\n      <td>3</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>2178-03-27 19:23:00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10117812</td>\n      <td>20001770</td>\n      <td>1</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10926139</td>\n      <td>20001811</td>\n      <td>3</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>18921218</td>\n      <td>20001976</td>\n      <td>1</td>\n      <td>Medicaid</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>19476485</td>\n      <td>20002267</td>\n      <td>2</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>Black/African American</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>16230775</td>\n      <td>20002506</td>\n      <td>1</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>NaN</td>\n      <td>Other</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>18596567</td>\n      <td>20002950</td>\n      <td>1</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>17656146</td>\n      <td>20003587</td>\n      <td>1</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n      <td>2146-04-18 02:15:00</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>19657904</td>\n      <td>20004357</td>\n      <td>3</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>Black/African American</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 18,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713109000551
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# unique patients in physical restraint data\n",
        "physical_df['hadm_id'].nunique()\n",
        "#27417"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 7,
          "data": {
            "text/plain": "27417"
          },
          "metadata": {}
        }
      ],
      "execution_count": 7,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713108160101
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating summary table\n",
        "race_days = physical_df.groupby('race')['restraintdays'].mean().reset_index()\n",
        "race_days['count'] = physical_df.groupby('race')['hadm_id'].nunique().reset_index()['hadm_id']\n",
        "\n",
        "race_days"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 19,
          "data": {
            "text/plain": "                                        race  restraintdays  count\n0              American Indian/Alaska Native       4.714286     49\n1                                      Asian       3.841667    720\n2                     Black/African American       4.291810   2320\n3                            Hispanic/Latino       3.804728    973\n4  Native Hawaiian or Other Pacific Islander       4.850000     40\n5                                      Other       4.004900   5102\n6                                      White       3.676605  18213",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>race</th>\n      <th>restraintdays</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>American Indian/Alaska Native</td>\n      <td>4.714286</td>\n      <td>49</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Asian</td>\n      <td>3.841667</td>\n      <td>720</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Black/African American</td>\n      <td>4.291810</td>\n      <td>2320</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Hispanic/Latino</td>\n      <td>3.804728</td>\n      <td>973</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Native Hawaiian or Other Pacific Islander</td>\n      <td>4.850000</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Other</td>\n      <td>4.004900</td>\n      <td>5102</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>White</td>\n      <td>3.676605</td>\n      <td>18213</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 19,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713109025065
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Sort the DataFrame by 'restraintdays' in descending order\n",
        "race_days_sorted = race_days.sort_values(by='restraintdays', ascending=False)\n",
        "\n",
        "# Plot\n",
        "plt.figure(figsize=(12, 8))\n",
        "bars = plt.barh(race_days_sorted['race'], race_days_sorted['restraintdays'], color='skyblue')\n",
        "\n",
        "# Overlay actual values on the bars\n",
        "for bar, value in zip(bars, race_days_sorted['restraintdays']):\n",
        "    plt.text(bar.get_width(), bar.get_y() + bar.get_height() / 2, f'{value:.2f}', \n",
        "             va='center', ha='left', fontsize=10, color='black')\n",
        "\n",
        "plt.xlabel('Average Number of Phyical Restraint Days')\n",
        "plt.ylabel('Race/Ethnicity')\n",
        "plt.title('Average Physical Restraint Days by Race (Ordered by Highest Average)')\n",
        "plt.gca().invert_yaxis()  # Invert y-axis to have the highest number of restraint days on top\n",
        "plt.tight_layout()  # Adjust layout to prevent clipping of labels\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1200x800 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": 9,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713108174399
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# import icustays\n",
        "icustays= pd.read_csv('downloaded_data/icustays.csv')\n",
        "icustays.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 21,
          "data": {
            "text/plain": "   subject_id   hadm_id   stay_id  first_careunit   last_careunit  \\\n0    10004113  29879900  35200789  Neuro Stepdown  Neuro Stepdown   \n1    10018328  23786647  31269608  Neuro Stepdown  Neuro Stepdown   \n2    10019607  24546857  34178938  Neuro Stepdown  Neuro Stepdown   \n3    10023994  21824032  30439823  Neuro Stepdown  Neuro Stepdown   \n4    10028930  26238833  33941522  Neuro Stepdown  Neuro Stepdown   \n\n                intime              outtime       los  \n0  2173-03-20 20:16:36  2173-03-21 21:43:59  1.060683  \n1  2154-04-24 23:03:44  2154-05-02 15:55:21  7.702512  \n2  2167-03-19 17:37:39  2167-03-21 13:12:28  1.815845  \n3  2146-07-19 15:32:22  2146-07-20 14:05:53  0.939942  \n4  2172-08-28 13:11:37  2172-08-29 14:19:35  1.047199  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>stay_id</th>\n      <th>first_careunit</th>\n      <th>last_careunit</th>\n      <th>intime</th>\n      <th>outtime</th>\n      <th>los</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10004113</td>\n      <td>29879900</td>\n      <td>35200789</td>\n      <td>Neuro Stepdown</td>\n      <td>Neuro Stepdown</td>\n      <td>2173-03-20 20:16:36</td>\n      <td>2173-03-21 21:43:59</td>\n      <td>1.060683</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10018328</td>\n      <td>23786647</td>\n      <td>31269608</td>\n      <td>Neuro Stepdown</td>\n      <td>Neuro Stepdown</td>\n      <td>2154-04-24 23:03:44</td>\n      <td>2154-05-02 15:55:21</td>\n      <td>7.702512</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10019607</td>\n      <td>24546857</td>\n      <td>34178938</td>\n      <td>Neuro Stepdown</td>\n      <td>Neuro Stepdown</td>\n      <td>2167-03-19 17:37:39</td>\n      <td>2167-03-21 13:12:28</td>\n      <td>1.815845</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10023994</td>\n      <td>21824032</td>\n      <td>30439823</td>\n      <td>Neuro Stepdown</td>\n      <td>Neuro Stepdown</td>\n      <td>2146-07-19 15:32:22</td>\n      <td>2146-07-20 14:05:53</td>\n      <td>0.939942</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10028930</td>\n      <td>26238833</td>\n      <td>33941522</td>\n      <td>Neuro Stepdown</td>\n      <td>Neuro Stepdown</td>\n      <td>2172-08-28 13:11:37</td>\n      <td>2172-08-29 14:19:35</td>\n      <td>1.047199</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 21,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713109178101
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing admissions table\n",
        "from azure.storage.blob import BlobServiceClient\n",
        "import io\n",
        "import pandas as pd\n",
        "\n",
        "# Set up the Azure Blob Storage connections\n",
        "sas_token = \"?sv=2022-11-02&ss=bfqt&srt=sco&sp=rwdlacupiytfx&se=2024-05-13T13:01:11Z&st=2024-04-13T05:01:11Z&spr=https,http&sig=X362UUEwAfkGDCBr2G0ZOc2SX%2FLg9LOddGvPHZ%2Fff00%3D\"\n",
        "\n",
        "datasets = {\n",
        "    \"admission\": {\n",
        "        \"account_url\": \"https://sadukedatauseprod.blob.core.windows.net\",\n",
        "        \"container_name\": \"mimiciv\",\n",
        "        \"blob_name\": \"mimiciv/hosp/admissions.csv\"\n",
        "    },\n",
        "    \"patient\": {\n",
        "        \"account_url\": \"https://sadukedatauseprod.blob.core.windows.net\",\n",
        "        \"container_name\": \"mimiciv\",\n",
        "        \"blob_name\": \"mimiciv/hosp/patients.csv\"\n",
        "    }\n",
        "}\n",
        "\n",
        "dfs = dict()\n",
        "for dataset_name, dataset_config in datasets.items():\n",
        "    print(f\"Accessing {dataset_name} dataset:\")\n",
        "\n",
        "    # Create a BlobServiceClient using the account URL and SAS token\n",
        "    blob_service_client = BlobServiceClient(\n",
        "        account_url=dataset_config[\"account_url\"],\n",
        "        credential=sas_token\n",
        "    )\n",
        "\n",
        "    # Get a reference to the container\n",
        "    container_client = blob_service_client.get_container_client(dataset_config[\"container_name\"])\n",
        "\n",
        "    # List the blobs in the container\n",
        "    print(f\"Blobs in the {dataset_name} container:\")\n",
        "    for blob in container_client.list_blobs():\n",
        "        print(blob.name)\n",
        "\n",
        "    # Read data from a specific blob (CSV file)\n",
        "    blob_client = container_client.get_blob_client(dataset_config[\"blob_name\"])\n",
        "\n",
        "    # Download the blob content as text\n",
        "    blob_content = blob_client.download_blob().readall().decode(\"utf-8\")\n",
        "\n",
        "    # Process the CSV data using pandas\n",
        "    df = pd.read_csv(io.StringIO(blob_content))\n",
        "    dfs[dataset_name]=df"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Accessing admission dataset:\nBlobs in the admission container:\nmimiciv/hosp/admissions.csv\nmimiciv/hosp/d_hcpcs.csv\nmimiciv/hosp/d_icd_diagnoses.csv\nmimiciv/hosp/d_icd_procedures.csv\nmimiciv/hosp/d_labitems.csv\nmimiciv/hosp/diagnoses_icd.csv\nmimiciv/hosp/drgcodes.csv\nmimiciv/hosp/emar.csv\nmimiciv/hosp/emar_detail.csv\nmimiciv/hosp/hcpcsevents.csv\nmimiciv/hosp/labevents.csv\nmimiciv/hosp/microbiologyevents.csv\nmimiciv/hosp/omr.csv\nmimiciv/hosp/patients.csv\nmimiciv/hosp/pharmacy.csv\nmimiciv/hosp/poe.csv\nmimiciv/hosp/poe_detail.csv\nmimiciv/hosp/prescriptions.csv\nmimiciv/hosp/procedures_icd.csv\nmimiciv/hosp/provider.csv\nmimiciv/hosp/services.csv\nmimiciv/hosp/transfers.csv\nmimiciv/icu/caregiver.csv\nmimiciv/icu/chartevents.csv\nmimiciv/icu/d_items.csv\nmimiciv/icu/datetimeevents.csv\nmimiciv/icu/icustays.csv\nmimiciv/icu/ingredientevents.csv\nmimiciv/icu/inputevents.csv\nmimiciv/icu/outputevents.csv\nmimiciv/icu/procedureevents.csv\nAccessing patient dataset:\nBlobs in the patient container:\nmimiciv/hosp/admissions.csv\nmimiciv/hosp/d_hcpcs.csv\nmimiciv/hosp/d_icd_diagnoses.csv\nmimiciv/hosp/d_icd_procedures.csv\nmimiciv/hosp/d_labitems.csv\nmimiciv/hosp/diagnoses_icd.csv\nmimiciv/hosp/drgcodes.csv\nmimiciv/hosp/emar.csv\nmimiciv/hosp/emar_detail.csv\nmimiciv/hosp/hcpcsevents.csv\nmimiciv/hosp/labevents.csv\nmimiciv/hosp/microbiologyevents.csv\nmimiciv/hosp/omr.csv\nmimiciv/hosp/patients.csv\nmimiciv/hosp/pharmacy.csv\nmimiciv/hosp/poe.csv\nmimiciv/hosp/poe_detail.csv\nmimiciv/hosp/prescriptions.csv\nmimiciv/hosp/procedures_icd.csv\nmimiciv/hosp/provider.csv\nmimiciv/hosp/services.csv\nmimiciv/hosp/transfers.csv\nmimiciv/icu/caregiver.csv\nmimiciv/icu/chartevents.csv\nmimiciv/icu/d_items.csv\nmimiciv/icu/datetimeevents.csv\nmimiciv/icu/icustays.csv\nmimiciv/icu/ingredientevents.csv\nmimiciv/icu/inputevents.csv\nmimiciv/icu/outputevents.csv\nmimiciv/icu/procedureevents.csv\n"
        }
      ],
      "execution_count": 24,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713109921985
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "admissions = dfs['admission']\n",
        "\n",
        "# Replace values in the 'race' column using the mapping\n",
        "admissions['race'] = admissions['race'].str.lower()\n",
        "admissions['race'] = admissions['race'].replace(race_mapping)\n",
        "\n",
        "admissions.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 32,
          "data": {
            "text/plain": "   subject_id   hadm_id            admittime            dischtime deathtime  \\\n0    10000032  22595853  2180-05-06 22:23:00  2180-05-07 17:15:00       NaN   \n1    10000032  22841357  2180-06-26 18:27:00  2180-06-27 18:49:00       NaN   \n2    10000032  25742920  2180-08-05 23:44:00  2180-08-07 17:50:00       NaN   \n3    10000032  29079034  2180-07-23 12:35:00  2180-07-25 17:55:00       NaN   \n4    10000068  25022803  2160-03-03 23:16:00  2160-03-04 06:26:00       NaN   \n\n   admission_type admit_provider_id      admission_location  \\\n0          URGENT            P874LG  TRANSFER FROM HOSPITAL   \n1        EW EMER.            P09Q6Y          EMERGENCY ROOM   \n2        EW EMER.            P60CC5          EMERGENCY ROOM   \n3        EW EMER.            P30KEH          EMERGENCY ROOM   \n4  EU OBSERVATION            P51VDL          EMERGENCY ROOM   \n\n  discharge_location insurance language marital_status   race  \\\n0               HOME     Other  ENGLISH        WIDOWED  White   \n1               HOME  Medicaid  ENGLISH        WIDOWED  White   \n2            HOSPICE  Medicaid  ENGLISH        WIDOWED  White   \n3               HOME  Medicaid  ENGLISH        WIDOWED  White   \n4                NaN     Other  ENGLISH         SINGLE  White   \n\n             edregtime            edouttime  hospital_expire_flag  \n0  2180-05-06 19:17:00  2180-05-06 23:30:00                     0  \n1  2180-06-26 15:54:00  2180-06-26 21:31:00                     0  \n2  2180-08-05 20:58:00  2180-08-06 01:44:00                     0  \n3  2180-07-23 05:54:00  2180-07-23 14:00:00                     0  \n4  2160-03-03 21:55:00  2160-03-04 06:26:00                     0  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>admittime</th>\n      <th>dischtime</th>\n      <th>deathtime</th>\n      <th>admission_type</th>\n      <th>admit_provider_id</th>\n      <th>admission_location</th>\n      <th>discharge_location</th>\n      <th>insurance</th>\n      <th>language</th>\n      <th>marital_status</th>\n      <th>race</th>\n      <th>edregtime</th>\n      <th>edouttime</th>\n      <th>hospital_expire_flag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10000032</td>\n      <td>22595853</td>\n      <td>2180-05-06 22:23:00</td>\n      <td>2180-05-07 17:15:00</td>\n      <td>NaN</td>\n      <td>URGENT</td>\n      <td>P874LG</td>\n      <td>TRANSFER FROM HOSPITAL</td>\n      <td>HOME</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>White</td>\n      <td>2180-05-06 19:17:00</td>\n      <td>2180-05-06 23:30:00</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10000032</td>\n      <td>22841357</td>\n      <td>2180-06-26 18:27:00</td>\n      <td>2180-06-27 18:49:00</td>\n      <td>NaN</td>\n      <td>EW EMER.</td>\n      <td>P09Q6Y</td>\n      <td>EMERGENCY ROOM</td>\n      <td>HOME</td>\n      <td>Medicaid</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>White</td>\n      <td>2180-06-26 15:54:00</td>\n      <td>2180-06-26 21:31:00</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10000032</td>\n      <td>25742920</td>\n      <td>2180-08-05 23:44:00</td>\n      <td>2180-08-07 17:50:00</td>\n      <td>NaN</td>\n      <td>EW EMER.</td>\n      <td>P60CC5</td>\n      <td>EMERGENCY ROOM</td>\n      <td>HOSPICE</td>\n      <td>Medicaid</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>White</td>\n      <td>2180-08-05 20:58:00</td>\n      <td>2180-08-06 01:44:00</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10000032</td>\n      <td>29079034</td>\n      <td>2180-07-23 12:35:00</td>\n      <td>2180-07-25 17:55:00</td>\n      <td>NaN</td>\n      <td>EW EMER.</td>\n      <td>P30KEH</td>\n      <td>EMERGENCY ROOM</td>\n      <td>HOME</td>\n      <td>Medicaid</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>White</td>\n      <td>2180-07-23 05:54:00</td>\n      <td>2180-07-23 14:00:00</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10000068</td>\n      <td>25022803</td>\n      <td>2160-03-03 23:16:00</td>\n      <td>2160-03-04 06:26:00</td>\n      <td>NaN</td>\n      <td>EU OBSERVATION</td>\n      <td>P51VDL</td>\n      <td>EMERGENCY ROOM</td>\n      <td>NaN</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>2160-03-03 21:55:00</td>\n      <td>2160-03-04 06:26:00</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 32,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713110442624
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "icu_admissions = pd.merge(icustays, admissions, on=['subject_id', 'hadm_id'])\n",
        "\n",
        "icu_admissions.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 33,
          "data": {
            "text/plain": "   subject_id   hadm_id   stay_id  first_careunit   last_careunit  \\\n0    10004113  29879900  35200789  Neuro Stepdown  Neuro Stepdown   \n1    10018328  23786647  31269608  Neuro Stepdown  Neuro Stepdown   \n2    10019607  24546857  34178938  Neuro Stepdown  Neuro Stepdown   \n3    10023994  21824032  30439823  Neuro Stepdown  Neuro Stepdown   \n4    10028930  26238833  33941522  Neuro Stepdown  Neuro Stepdown   \n\n                intime              outtime       los            admittime  \\\n0  2173-03-20 20:16:36  2173-03-21 21:43:59  1.060683  2173-03-20 00:00:00   \n1  2154-04-24 23:03:44  2154-05-02 15:55:21  7.702512  2154-04-24 03:15:00   \n2  2167-03-19 17:37:39  2167-03-21 13:12:28  1.815845  2167-03-19 17:36:00   \n3  2146-07-19 15:32:22  2146-07-20 14:05:53  0.939942  2146-07-19 02:13:00   \n4  2172-08-28 13:11:37  2172-08-29 14:19:35  1.047199  2172-08-28 13:09:00   \n\n             dischtime deathtime               admission_type  \\\n0  2173-03-22 14:35:00       NaN  SURGICAL SAME DAY ADMISSION   \n1  2154-05-03 14:00:00       NaN  SURGICAL SAME DAY ADMISSION   \n2  2167-03-21 12:55:00       NaN                       URGENT   \n3  2146-07-20 13:00:00       NaN  SURGICAL SAME DAY ADMISSION   \n4  2172-08-29 14:15:00       NaN           DIRECT OBSERVATION   \n\n  admit_provider_id      admission_location discharge_location insurance  \\\n0            P898NM      PHYSICIAN REFERRAL               HOME     Other   \n1            P898NM      PHYSICIAN REFERRAL   HOME HEALTH CARE     Other   \n2            P88US1  TRANSFER FROM HOSPITAL               HOME     Other   \n3            P898NM      PHYSICIAN REFERRAL               HOME     Other   \n4            P898NM  TRANSFER FROM HOSPITAL                NaN     Other   \n\n  language marital_status   race edregtime edouttime  hospital_expire_flag  \n0  ENGLISH        MARRIED  White       NaN       NaN                     0  \n1  ENGLISH       DIVORCED  White       NaN       NaN                     0  \n2  ENGLISH         SINGLE  Other       NaN       NaN                     0  \n3  ENGLISH         SINGLE  Other       NaN       NaN                     0  \n4  ENGLISH            NaN  Asian       NaN       NaN                     0  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>stay_id</th>\n      <th>first_careunit</th>\n      <th>last_careunit</th>\n      <th>intime</th>\n      <th>outtime</th>\n      <th>los</th>\n      <th>admittime</th>\n      <th>dischtime</th>\n      <th>deathtime</th>\n      <th>admission_type</th>\n      <th>admit_provider_id</th>\n      <th>admission_location</th>\n      <th>discharge_location</th>\n      <th>insurance</th>\n      <th>language</th>\n      <th>marital_status</th>\n      <th>race</th>\n      <th>edregtime</th>\n      <th>edouttime</th>\n      <th>hospital_expire_flag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10004113</td>\n      <td>29879900</td>\n      <td>35200789</td>\n      <td>Neuro Stepdown</td>\n      <td>Neuro Stepdown</td>\n      <td>2173-03-20 20:16:36</td>\n      <td>2173-03-21 21:43:59</td>\n      <td>1.060683</td>\n      <td>2173-03-20 00:00:00</td>\n      <td>2173-03-22 14:35:00</td>\n      <td>NaN</td>\n      <td>SURGICAL SAME DAY ADMISSION</td>\n      <td>P898NM</td>\n      <td>PHYSICIAN REFERRAL</td>\n      <td>HOME</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>White</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10018328</td>\n      <td>23786647</td>\n      <td>31269608</td>\n      <td>Neuro Stepdown</td>\n      <td>Neuro Stepdown</td>\n      <td>2154-04-24 23:03:44</td>\n      <td>2154-05-02 15:55:21</td>\n      <td>7.702512</td>\n      <td>2154-04-24 03:15:00</td>\n      <td>2154-05-03 14:00:00</td>\n      <td>NaN</td>\n      <td>SURGICAL SAME DAY ADMISSION</td>\n      <td>P898NM</td>\n      <td>PHYSICIAN REFERRAL</td>\n      <td>HOME HEALTH CARE</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>DIVORCED</td>\n      <td>White</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10019607</td>\n      <td>24546857</td>\n      <td>34178938</td>\n      <td>Neuro Stepdown</td>\n      <td>Neuro Stepdown</td>\n      <td>2167-03-19 17:37:39</td>\n      <td>2167-03-21 13:12:28</td>\n      <td>1.815845</td>\n      <td>2167-03-19 17:36:00</td>\n      <td>2167-03-21 12:55:00</td>\n      <td>NaN</td>\n      <td>URGENT</td>\n      <td>P88US1</td>\n      <td>TRANSFER FROM HOSPITAL</td>\n      <td>HOME</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>Other</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10023994</td>\n      <td>21824032</td>\n      <td>30439823</td>\n      <td>Neuro Stepdown</td>\n      <td>Neuro Stepdown</td>\n      <td>2146-07-19 15:32:22</td>\n      <td>2146-07-20 14:05:53</td>\n      <td>0.939942</td>\n      <td>2146-07-19 02:13:00</td>\n      <td>2146-07-20 13:00:00</td>\n      <td>NaN</td>\n      <td>SURGICAL SAME DAY ADMISSION</td>\n      <td>P898NM</td>\n      <td>PHYSICIAN REFERRAL</td>\n      <td>HOME</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>Other</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10028930</td>\n      <td>26238833</td>\n      <td>33941522</td>\n      <td>Neuro Stepdown</td>\n      <td>Neuro Stepdown</td>\n      <td>2172-08-28 13:11:37</td>\n      <td>2172-08-29 14:19:35</td>\n      <td>1.047199</td>\n      <td>2172-08-28 13:09:00</td>\n      <td>2172-08-29 14:15:00</td>\n      <td>NaN</td>\n      <td>DIRECT OBSERVATION</td>\n      <td>P898NM</td>\n      <td>TRANSFER FROM HOSPITAL</td>\n      <td>NaN</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>NaN</td>\n      <td>Asian</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 33,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713110452533
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Merge the DataFrames on subject_id and hadm_id\n",
        "merged_df = pd.merge(icu_admissions, physical_df, on=['subject_id', 'hadm_id'], how='left', suffixes=('', '_restrained'))\n",
        "\n",
        "# Indicator for whether the row has restraint data\n",
        "merged_df['is_restrained'] = merged_df['race_restrained'].notna()\n",
        "\n",
        "# Group by race from the all_patients DataFrame\n",
        "grouped = merged_df.groupby('race')\n",
        "\n",
        "# Calculate the counts and percentage\n",
        "race_stats = grouped.agg(\n",
        "    total_patients=('subject_id', 'count'),\n",
        "    restrained_patients=('is_restrained', 'sum')\n",
        ")\n",
        "race_stats['percentage_restrained'] = (race_stats['restrained_patients'] / race_stats['total_patients']) * 100\n",
        "\n",
        "# Reset index to make 'race' a column again\n",
        "race_stats.reset_index(inplace=True)\n",
        "\n",
        "# Display the result\n",
        "print(race_stats[['race', 'total_patients', 'restrained_patients', 'percentage_restrained']])"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Unexpected exception formatting exception. Falling back to standard exception\n"
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "Traceback (most recent call last):\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 3508, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"/tmp/ipykernel_8438/1691105129.py\", line 15, in <module>\n    race_stats['percentage_restrained'] = (race_stats['restrained_patients'] / race_stats['total_patients']) * 100\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/pandas/core/ops/common.py\", line 65, in new_method\n    is_cmp = stripped_name in {\"eq\", \"ne\", \"lt\", \"le\", \"gt\", \"ge\"}\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/pandas/core/ops/__init__.py\", line 343, in wrapper\n    assert isinstance(left, ABCDataFrame)\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/pandas/core/ops/array_ops.py\", line 190, in arithmetic_op\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/pandas/core/ops/array_ops.py\", line 140, in na_arithmetic_op\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/pandas/core/computation/expressions.py\", line 18, in <module>\n    from pandas.util._exceptions import find_stack_level\nImportError: cannot import name 'find_stack_level' from 'pandas.util._exceptions' (/anaconda/envs/azureml_py38/lib/python3.8/site-packages/pandas/util/_exceptions.py)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 2105, in showtraceback\n    stb = self.InteractiveTB.structured_traceback(\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1396, in structured_traceback\n    return FormattedTB.structured_traceback(\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1287, in structured_traceback\n    return VerboseTB.structured_traceback(\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1140, in structured_traceback\n    formatted_exception = self.format_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context,\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1055, in format_exception_as_a_whole\n    frames.append(self.format_record(record))\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 955, in format_record\n    frame_info.lines, Colors, self.has_colors, lvals\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 778, in lines\n    return self._sd.lines\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/stack_data/utils.py\", line 144, in cached_property_wrapper\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/stack_data/core.py\", line 734, in lines\n    pieces = self.included_pieces\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/stack_data/utils.py\", line 144, in cached_property_wrapper\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/stack_data/core.py\", line 681, in included_pieces\n    pos = scope_pieces.index(self.executing_piece)\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/stack_data/utils.py\", line 144, in cached_property_wrapper\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/stack_data/core.py\", line 660, in executing_piece\n    return only(\n  File \"/anaconda/envs/azureml_py38/lib/python3.8/site-packages/executing/executing.py\", line 190, in only\n    raise NotOneValueFound('Expected one value, found 0')\nexecuting.executing.NotOneValueFound: Expected one value, found 0\n"
        }
      ],
      "execution_count": 34,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713110832606
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Pharmacological Restraint Data\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "pd.set_option('display.max_rows', 100)\n",
        "pd.set_option('display.max_columns', 50)\n",
        "\n",
        "\n",
        "pharmacologicalrestraints = \"downloaded_data/medical_restraints_2.csv\"\n",
        "\n",
        "pharm= pd.read_csv(pharmacologicalrestraints)\n",
        "pharm.head(10)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 10,
          "data": {
            "text/plain": "   subject_id   hadm_id insurance language marital_status  \\\n0    10001884  26184834  Medicare  ENGLISH        MARRIED   \n1    10004720  22081550  Medicare  ENGLISH         SINGLE   \n2    10005606  29646384     Other  ENGLISH         SINGLE   \n3    10005606  29646384     Other  ENGLISH         SINGLE   \n4    10005606  29646384     Other  ENGLISH         SINGLE   \n5    10007818  22987108  Medicare  ENGLISH        MARRIED   \n6    10010058  26359957     Other        ?        MARRIED   \n7    10010058  26359957     Other        ?        MARRIED   \n8    10010867  22429197     Other  ENGLISH         SINGLE   \n9    10010867  22429197     Other  ENGLISH         SINGLE   \n\n                       race gender  anchor_age   chartdate  \\\n0    BLACK/AFRICAN AMERICAN      F          68  2131-01-12   \n1                     WHITE      M          61  2186-11-17   \n2                     WHITE      M          38  2143-12-08   \n3                     WHITE      M          38  2143-12-10   \n4                     WHITE      M          38  2143-12-09   \n5                     WHITE      M          69  2146-07-12   \n6  ASIAN - SOUTH EAST ASIAN      M          80  2147-11-18   \n7  ASIAN - SOUTH EAST ASIAN      M          80  2147-11-19   \n8         WHITE - BRAZILIAN      F          28  2148-01-04   \n9         WHITE - BRAZILIAN      F          28  2148-01-05   \n\n                intime              outtime  total_dose_lorazepam  \\\n0  2131-01-11 04:20:05  2131-01-20 08:27:30                   1.0   \n1  2186-11-12 19:55:00  2186-11-17 21:15:55                   4.0   \n2  2143-12-06 02:08:00  2143-12-12 16:25:18                   0.0   \n3  2143-12-06 02:08:00  2143-12-12 16:25:18                   0.0   \n4  2143-12-06 02:08:00  2143-12-12 16:25:18                   0.0   \n5  2146-06-22 11:46:29  2146-07-13 00:27:47                   0.5   \n6  2147-11-18 03:19:00  2147-11-19 08:53:33                   0.0   \n7  2147-11-18 03:19:00  2147-11-19 08:53:33                   0.0   \n8  2147-12-30 09:33:00  2148-01-08 18:14:21                   2.0   \n9  2147-12-30 09:33:00  2148-01-08 18:14:21                   2.0   \n\n   total_dose_diazepam  total_dose_midazolam  total_dose_ziprasidone  \\\n0                  0.0                   0.0                       0   \n1                  0.0                   0.0                       0   \n2                  0.0                   6.0                       0   \n3                  0.0                   4.0                       0   \n4                  0.0                   4.0                       0   \n5                  0.0                   0.0                       0   \n6                  0.0                   4.0                       0   \n7                  0.0                   2.0                       0   \n8                  0.0                   0.0                       0   \n9                  0.0                   0.0                       0   \n\n   total_dose_aripiprazole  total_dose_haloperidol  total_dose_olanzapine  \\\n0                        0                     0.0                    0.0   \n1                        0                     0.0                    0.0   \n2                        0                     0.0                    0.0   \n3                        0                     5.0                    0.0   \n4                        0                     0.0                    0.0   \n5                        0                     0.0                    0.0   \n6                        0                     0.0                    0.0   \n7                        0                     0.0                    0.0   \n8                        0                     0.0                    0.0   \n9                        0                     0.0                    0.0   \n\n   total_dose_paliperidone  total_dose_prochlorperazine  \\\n0                        0                            0   \n1                        0                            0   \n2                        0                            0   \n3                        0                            0   \n4                        0                            0   \n5                        0                            0   \n6                        0                            0   \n7                        0                            0   \n8                        0                            0   \n9                        0                            0   \n\n   total_dose_chlorpromazine  total_dose_droperidol  \n0                        0.0                      0  \n1                        0.0                      0  \n2                        0.0                      0  \n3                        0.0                      0  \n4                        0.0                      0  \n5                        0.0                      0  \n6                        0.0                      0  \n7                        0.0                      0  \n8                        0.0                      0  \n9                        0.0                      0  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>insurance</th>\n      <th>language</th>\n      <th>marital_status</th>\n      <th>race</th>\n      <th>gender</th>\n      <th>anchor_age</th>\n      <th>chartdate</th>\n      <th>intime</th>\n      <th>outtime</th>\n      <th>total_dose_lorazepam</th>\n      <th>total_dose_diazepam</th>\n      <th>total_dose_midazolam</th>\n      <th>total_dose_ziprasidone</th>\n      <th>total_dose_aripiprazole</th>\n      <th>total_dose_haloperidol</th>\n      <th>total_dose_olanzapine</th>\n      <th>total_dose_paliperidone</th>\n      <th>total_dose_prochlorperazine</th>\n      <th>total_dose_chlorpromazine</th>\n      <th>total_dose_droperidol</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>BLACK/AFRICAN AMERICAN</td>\n      <td>F</td>\n      <td>68</td>\n      <td>2131-01-12</td>\n      <td>2131-01-11 04:20:05</td>\n      <td>2131-01-20 08:27:30</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10004720</td>\n      <td>22081550</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>WHITE</td>\n      <td>M</td>\n      <td>61</td>\n      <td>2186-11-17</td>\n      <td>2186-11-12 19:55:00</td>\n      <td>2186-11-17 21:15:55</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10005606</td>\n      <td>29646384</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>WHITE</td>\n      <td>M</td>\n      <td>38</td>\n      <td>2143-12-08</td>\n      <td>2143-12-06 02:08:00</td>\n      <td>2143-12-12 16:25:18</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10005606</td>\n      <td>29646384</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>WHITE</td>\n      <td>M</td>\n      <td>38</td>\n      <td>2143-12-10</td>\n      <td>2143-12-06 02:08:00</td>\n      <td>2143-12-12 16:25:18</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10005606</td>\n      <td>29646384</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>WHITE</td>\n      <td>M</td>\n      <td>38</td>\n      <td>2143-12-09</td>\n      <td>2143-12-06 02:08:00</td>\n      <td>2143-12-12 16:25:18</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>10007818</td>\n      <td>22987108</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>WHITE</td>\n      <td>M</td>\n      <td>69</td>\n      <td>2146-07-12</td>\n      <td>2146-06-22 11:46:29</td>\n      <td>2146-07-13 00:27:47</td>\n      <td>0.5</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>10010058</td>\n      <td>26359957</td>\n      <td>Other</td>\n      <td>?</td>\n      <td>MARRIED</td>\n      <td>ASIAN - SOUTH EAST ASIAN</td>\n      <td>M</td>\n      <td>80</td>\n      <td>2147-11-18</td>\n      <td>2147-11-18 03:19:00</td>\n      <td>2147-11-19 08:53:33</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>10010058</td>\n      <td>26359957</td>\n      <td>Other</td>\n      <td>?</td>\n      <td>MARRIED</td>\n      <td>ASIAN - SOUTH EAST ASIAN</td>\n      <td>M</td>\n      <td>80</td>\n      <td>2147-11-19</td>\n      <td>2147-11-18 03:19:00</td>\n      <td>2147-11-19 08:53:33</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>10010867</td>\n      <td>22429197</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>WHITE - BRAZILIAN</td>\n      <td>F</td>\n      <td>28</td>\n      <td>2148-01-04</td>\n      <td>2147-12-30 09:33:00</td>\n      <td>2148-01-08 18:14:21</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10010867</td>\n      <td>22429197</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>WHITE - BRAZILIAN</td>\n      <td>F</td>\n      <td>28</td>\n      <td>2148-01-05</td>\n      <td>2147-12-30 09:33:00</td>\n      <td>2148-01-08 18:14:21</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 10,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713108185776
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mapping race\n",
        "pharm['race'] = pharm['race'].str.lower()\n",
        "\n",
        "# Replace values in the 'race' column using the mapping\n",
        "pharm['race'] = pharm['race'].replace(race_mapping)\n",
        "\n",
        "# Display the modified DataFrame\n",
        "pharm.head(10)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 11,
          "data": {
            "text/plain": "   subject_id   hadm_id insurance language marital_status  \\\n0    10001884  26184834  Medicare  ENGLISH        MARRIED   \n1    10004720  22081550  Medicare  ENGLISH         SINGLE   \n2    10005606  29646384     Other  ENGLISH         SINGLE   \n3    10005606  29646384     Other  ENGLISH         SINGLE   \n4    10005606  29646384     Other  ENGLISH         SINGLE   \n5    10007818  22987108  Medicare  ENGLISH        MARRIED   \n6    10010058  26359957     Other        ?        MARRIED   \n7    10010058  26359957     Other        ?        MARRIED   \n8    10010867  22429197     Other  ENGLISH         SINGLE   \n9    10010867  22429197     Other  ENGLISH         SINGLE   \n\n                     race gender  anchor_age   chartdate               intime  \\\n0  Black/African American      F          68  2131-01-12  2131-01-11 04:20:05   \n1                   White      M          61  2186-11-17  2186-11-12 19:55:00   \n2                   White      M          38  2143-12-08  2143-12-06 02:08:00   \n3                   White      M          38  2143-12-10  2143-12-06 02:08:00   \n4                   White      M          38  2143-12-09  2143-12-06 02:08:00   \n5                   White      M          69  2146-07-12  2146-06-22 11:46:29   \n6                   Asian      M          80  2147-11-18  2147-11-18 03:19:00   \n7                   Asian      M          80  2147-11-19  2147-11-18 03:19:00   \n8                   White      F          28  2148-01-04  2147-12-30 09:33:00   \n9                   White      F          28  2148-01-05  2147-12-30 09:33:00   \n\n               outtime  total_dose_lorazepam  total_dose_diazepam  \\\n0  2131-01-20 08:27:30                   1.0                  0.0   \n1  2186-11-17 21:15:55                   4.0                  0.0   \n2  2143-12-12 16:25:18                   0.0                  0.0   \n3  2143-12-12 16:25:18                   0.0                  0.0   \n4  2143-12-12 16:25:18                   0.0                  0.0   \n5  2146-07-13 00:27:47                   0.5                  0.0   \n6  2147-11-19 08:53:33                   0.0                  0.0   \n7  2147-11-19 08:53:33                   0.0                  0.0   \n8  2148-01-08 18:14:21                   2.0                  0.0   \n9  2148-01-08 18:14:21                   2.0                  0.0   \n\n   total_dose_midazolam  total_dose_ziprasidone  total_dose_aripiprazole  \\\n0                   0.0                       0                        0   \n1                   0.0                       0                        0   \n2                   6.0                       0                        0   \n3                   4.0                       0                        0   \n4                   4.0                       0                        0   \n5                   0.0                       0                        0   \n6                   4.0                       0                        0   \n7                   2.0                       0                        0   \n8                   0.0                       0                        0   \n9                   0.0                       0                        0   \n\n   total_dose_haloperidol  total_dose_olanzapine  total_dose_paliperidone  \\\n0                     0.0                    0.0                        0   \n1                     0.0                    0.0                        0   \n2                     0.0                    0.0                        0   \n3                     5.0                    0.0                        0   \n4                     0.0                    0.0                        0   \n5                     0.0                    0.0                        0   \n6                     0.0                    0.0                        0   \n7                     0.0                    0.0                        0   \n8                     0.0                    0.0                        0   \n9                     0.0                    0.0                        0   \n\n   total_dose_prochlorperazine  total_dose_chlorpromazine  \\\n0                            0                        0.0   \n1                            0                        0.0   \n2                            0                        0.0   \n3                            0                        0.0   \n4                            0                        0.0   \n5                            0                        0.0   \n6                            0                        0.0   \n7                            0                        0.0   \n8                            0                        0.0   \n9                            0                        0.0   \n\n   total_dose_droperidol  \n0                      0  \n1                      0  \n2                      0  \n3                      0  \n4                      0  \n5                      0  \n6                      0  \n7                      0  \n8                      0  \n9                      0  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>insurance</th>\n      <th>language</th>\n      <th>marital_status</th>\n      <th>race</th>\n      <th>gender</th>\n      <th>anchor_age</th>\n      <th>chartdate</th>\n      <th>intime</th>\n      <th>outtime</th>\n      <th>total_dose_lorazepam</th>\n      <th>total_dose_diazepam</th>\n      <th>total_dose_midazolam</th>\n      <th>total_dose_ziprasidone</th>\n      <th>total_dose_aripiprazole</th>\n      <th>total_dose_haloperidol</th>\n      <th>total_dose_olanzapine</th>\n      <th>total_dose_paliperidone</th>\n      <th>total_dose_prochlorperazine</th>\n      <th>total_dose_chlorpromazine</th>\n      <th>total_dose_droperidol</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n      <td>F</td>\n      <td>68</td>\n      <td>2131-01-12</td>\n      <td>2131-01-11 04:20:05</td>\n      <td>2131-01-20 08:27:30</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10004720</td>\n      <td>22081550</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>M</td>\n      <td>61</td>\n      <td>2186-11-17</td>\n      <td>2186-11-12 19:55:00</td>\n      <td>2186-11-17 21:15:55</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10005606</td>\n      <td>29646384</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>M</td>\n      <td>38</td>\n      <td>2143-12-08</td>\n      <td>2143-12-06 02:08:00</td>\n      <td>2143-12-12 16:25:18</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10005606</td>\n      <td>29646384</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>M</td>\n      <td>38</td>\n      <td>2143-12-10</td>\n      <td>2143-12-06 02:08:00</td>\n      <td>2143-12-12 16:25:18</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10005606</td>\n      <td>29646384</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>M</td>\n      <td>38</td>\n      <td>2143-12-09</td>\n      <td>2143-12-06 02:08:00</td>\n      <td>2143-12-12 16:25:18</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>10007818</td>\n      <td>22987108</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>White</td>\n      <td>M</td>\n      <td>69</td>\n      <td>2146-07-12</td>\n      <td>2146-06-22 11:46:29</td>\n      <td>2146-07-13 00:27:47</td>\n      <td>0.5</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>10010058</td>\n      <td>26359957</td>\n      <td>Other</td>\n      <td>?</td>\n      <td>MARRIED</td>\n      <td>Asian</td>\n      <td>M</td>\n      <td>80</td>\n      <td>2147-11-18</td>\n      <td>2147-11-18 03:19:00</td>\n      <td>2147-11-19 08:53:33</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>10010058</td>\n      <td>26359957</td>\n      <td>Other</td>\n      <td>?</td>\n      <td>MARRIED</td>\n      <td>Asian</td>\n      <td>M</td>\n      <td>80</td>\n      <td>2147-11-19</td>\n      <td>2147-11-18 03:19:00</td>\n      <td>2147-11-19 08:53:33</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>10010867</td>\n      <td>22429197</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>F</td>\n      <td>28</td>\n      <td>2148-01-04</td>\n      <td>2147-12-30 09:33:00</td>\n      <td>2148-01-08 18:14:21</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10010867</td>\n      <td>22429197</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>F</td>\n      <td>28</td>\n      <td>2148-01-05</td>\n      <td>2147-12-30 09:33:00</td>\n      <td>2148-01-08 18:14:21</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 11,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713108216877
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Taking dataframe and calculating the number of restraint days\n",
        "pharm_df=pharm.copy()\n",
        "pharm_df=pharm.groupby('hadm_id').size().reset_index(name='restraintdays')\n",
        "\n",
        "# Merge with the original DataFrame to get the other columns\n",
        "pharm_df = pharm_df.merge(pharm[['subject_id', 'hadm_id', 'insurance', 'language', 'marital_status', 'race']].drop_duplicates(), on='hadm_id')\n",
        "\n",
        "# Reordering columns as per requirement\n",
        "pharm_df = pharm_df[['subject_id', 'hadm_id', 'restraintdays', 'insurance', 'language', 'marital_status', 'race']]\n",
        "\n",
        "# Sort by subject_id\n",
        "pharm_df = pharm_df.sort_values(by='subject_id')\n",
        "\n",
        "# Displaying the resulting DataFrame\n",
        "pharm_df.head(10)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 12,
          "data": {
            "text/plain": "      subject_id   hadm_id  restraintdays insurance language marital_status  \\\n3563    10001884  26184834              1  Medicare  ENGLISH        MARRIED   \n1153    10004720  22081550              1  Medicare  ENGLISH         SINGLE   \n5544    10005606  29646384              3     Other  ENGLISH         SINGLE   \n1679    10007818  22987108              1  Medicare  ENGLISH        MARRIED   \n3649    10010058  26359957              2     Other        ?        MARRIED   \n1353    10010867  22429197              5     Other  ENGLISH         SINGLE   \n3867    10011365  26712576              1  Medicare  ENGLISH        WIDOWED   \n115     10011427  20219031              1     Other  ENGLISH        MARRIED   \n1548    10012438  22764825              2  Medicare  ENGLISH         SINGLE   \n1841    10014610  23258342              1  Medicare  ENGLISH        MARRIED   \n\n                        race  \n3563  Black/African American  \n1153                   White  \n5544                   White  \n1679                   White  \n3649                   Asian  \n1353                   White  \n3867                   White  \n115                    White  \n1548                   White  \n1841  Black/African American  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>restraintdays</th>\n      <th>insurance</th>\n      <th>language</th>\n      <th>marital_status</th>\n      <th>race</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3563</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>1</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n    </tr>\n    <tr>\n      <th>1153</th>\n      <td>10004720</td>\n      <td>22081550</td>\n      <td>1</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n    </tr>\n    <tr>\n      <th>5544</th>\n      <td>10005606</td>\n      <td>29646384</td>\n      <td>3</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n    </tr>\n    <tr>\n      <th>1679</th>\n      <td>10007818</td>\n      <td>22987108</td>\n      <td>1</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>White</td>\n    </tr>\n    <tr>\n      <th>3649</th>\n      <td>10010058</td>\n      <td>26359957</td>\n      <td>2</td>\n      <td>Other</td>\n      <td>?</td>\n      <td>MARRIED</td>\n      <td>Asian</td>\n    </tr>\n    <tr>\n      <th>1353</th>\n      <td>10010867</td>\n      <td>22429197</td>\n      <td>5</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n    </tr>\n    <tr>\n      <th>3867</th>\n      <td>10011365</td>\n      <td>26712576</td>\n      <td>1</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>White</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>10011427</td>\n      <td>20219031</td>\n      <td>1</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>White</td>\n    </tr>\n    <tr>\n      <th>1548</th>\n      <td>10012438</td>\n      <td>22764825</td>\n      <td>2</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n    </tr>\n    <tr>\n      <th>1841</th>\n      <td>10014610</td>\n      <td>23258342</td>\n      <td>1</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 12,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713108228862
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# unique patients in pharmacological restraint data\n",
        "pharm_df['hadm_id'].nunique()\n",
        "# 5753"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 13,
          "data": {
            "text/plain": "5744"
          },
          "metadata": {}
        }
      ],
      "execution_count": 13,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713108239401
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating summary table\n",
        "racerx_days = pharm_df.groupby('race')['restraintdays'].mean().reset_index()\n",
        "racerx_days['count'] = pharm_df.groupby('race')['hadm_id'].nunique().reset_index()['hadm_id']\n",
        "\n",
        "racerx_days"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 14,
          "data": {
            "text/plain": "                                        race  restraintdays  count\n0              American Indian/Alaska Native       1.461538     13\n1                                      Asian       1.814815    135\n2                     Black/African American       2.090741    540\n3                            Hispanic/Latino       2.385027    187\n4  Native Hawaiian or Other Pacific Islander       2.315789     19\n5                                      Other       2.304269   1101\n6                                      White       2.104294   3749",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>race</th>\n      <th>restraintdays</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>American Indian/Alaska Native</td>\n      <td>1.461538</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Asian</td>\n      <td>1.814815</td>\n      <td>135</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Black/African American</td>\n      <td>2.090741</td>\n      <td>540</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Hispanic/Latino</td>\n      <td>2.385027</td>\n      <td>187</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Native Hawaiian or Other Pacific Islander</td>\n      <td>2.315789</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Other</td>\n      <td>2.304269</td>\n      <td>1101</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>White</td>\n      <td>2.104294</td>\n      <td>3749</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 14,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713108242273
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Sort the DataFrame by 'restraintdays' in descending order\n",
        "racerx_days_sorted = racerx_days.sort_values(by='restraintdays', ascending=False)\n",
        "\n",
        "# Plot\n",
        "plt.figure(figsize=(12, 8))\n",
        "bars = plt.barh(racerx_days_sorted['race'], racerx_days_sorted['restraintdays'], color='skyblue')\n",
        "\n",
        "# Overlay actual values on the bars\n",
        "for bar, value in zip(bars, racerx_days_sorted['restraintdays']):\n",
        "    plt.text(bar.get_width(), bar.get_y() + bar.get_height() / 2, f'{value:.2f}', \n",
        "             va='center', ha='left', fontsize=10, color='black')\n",
        "\n",
        "plt.xlabel('Average Number of Pharmacological Restraint Days')\n",
        "plt.ylabel('Race/Ethnicity')\n",
        "plt.title('Average Pharmacological Restraint Days by Race (Ordered by Highest Average)')\n",
        "plt.gca().invert_yaxis()  # Invert y-axis to have the highest number of restraint days on top\n",
        "plt.tight_layout()  # Adjust layout to prevent clipping of labels\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1200x800 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": 15,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713108251205
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# # Describing the number of each medication used (for descriptive purposes only) --- NOT WORKING, NEED TO UPDATE if want this data\n",
        "\n",
        "# # Group by 'subject_id' and 'chartdate' and iterate over the columns after 'chartdate'\n",
        "# result = []\n",
        "# for _, group in pharm_df.groupby(['subject_id', 'chartdate']):\n",
        "#     group_data = group.iloc[0]  # Take the first row of each group\n",
        "#     for col in group.columns:\n",
        "#         if col.startswith('total_dose_') and group_data[col] != 0:\n",
        "#             new_row = group_data[['subject_id', 'insurance', 'language', 'marital_status', 'race', 'gender', 'anchor_age', 'chartdate']].copy()\n",
        "#             new_row['medication'] = col\n",
        "#             new_row['dose'] = group_data[col]\n",
        "#             result.append(new_row)\n",
        "\n",
        "# # Concatenate the resulting rows into a new DataFrame\n",
        "# result_df = pd.concat(result, axis=1).T\n",
        "\n",
        "# # Reset the index\n",
        "# result_df.reset_index(drop=True, inplace=True)"
      ],
      "outputs": [],
      "execution_count": 16,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": true
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107759117
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Merge the DataFrames on 'subject_id' and 'hadm_id' with an outer join\n",
        "combined_df = pd.merge(pharm_df, physical_df, on=['subject_id', 'hadm_id'], how='outer')\n",
        "\n",
        "# Fill missing values with 0\n",
        "combined_df['pharmrestraintdays'] = combined_df['restraintdays_x'].fillna(0)\n",
        "combined_df['physicalrestraintdays'] = combined_df['restraintdays_y'].fillna(0)\n",
        "\n",
        "# Drop the original restraintdays columns if necessary\n",
        "combined_df.drop(columns=['restraintdays_x', 'restraintdays_y'], inplace=True)\n",
        "\n",
        "# Drop duplicate columns\n",
        "combined_df.drop(columns=['insurance_y', 'language_y', 'marital_status_y', 'race_y'], inplace=True)\n",
        "\n",
        "# Rename the remaining columns\n",
        "combined_df.rename(columns={'insurance_x': 'insurance', 'language_x': 'language',\n",
        "                            'marital_status_x': 'marital_status', 'race_x': 'race'}, inplace=True)\n",
        "\n",
        "\n",
        "combined_df.head(10)\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "   subject_id   hadm_id insurance language marital_status  \\\n0    10001884  26184834  Medicare  ENGLISH        MARRIED   \n1    10004720  22081550  Medicare  ENGLISH         SINGLE   \n2    10005606  29646384     Other  ENGLISH         SINGLE   \n3    10007818  22987108  Medicare  ENGLISH        MARRIED   \n4    10010058  26359957     Other        ?        MARRIED   \n5    10010867  22429197     Other  ENGLISH         SINGLE   \n6    10011365  26712576  Medicare  ENGLISH        WIDOWED   \n7    10011427  20219031     Other  ENGLISH        MARRIED   \n8    10012438  22764825  Medicare  ENGLISH         SINGLE   \n9    10014610  23258342  Medicare  ENGLISH        MARRIED   \n\n                     race            deathtime  pharmrestraintdays  \\\n0  Black/African American  2131-01-20 05:15:00                 1.0   \n1                   White  2186-11-17 18:30:00                 1.0   \n2                   White                  NaN                 3.0   \n3                   White  2146-07-12 20:50:00                 1.0   \n4                   Asian  2147-11-19 04:00:00                 2.0   \n5                   White                  NaN                 5.0   \n6                   White  2166-02-20 00:20:00                 1.0   \n7                   White                  NaN                 1.0   \n8                   White                  NaN                 2.0   \n9  Black/African American                  NaN                 1.0   \n\n   physicalrestraintdays  \n0                    9.0  \n1                    4.0  \n2                    6.0  \n3                   10.0  \n4                    1.0  \n5                   10.0  \n6                    8.0  \n7                    2.0  \n8                    0.0  \n9                    3.0  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>insurance</th>\n      <th>language</th>\n      <th>marital_status</th>\n      <th>race</th>\n      <th>deathtime</th>\n      <th>pharmrestraintdays</th>\n      <th>physicalrestraintdays</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10001884</td>\n      <td>26184834</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n      <td>2131-01-20 05:15:00</td>\n      <td>1.0</td>\n      <td>9.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10004720</td>\n      <td>22081550</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>2186-11-17 18:30:00</td>\n      <td>1.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10005606</td>\n      <td>29646384</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10007818</td>\n      <td>22987108</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>White</td>\n      <td>2146-07-12 20:50:00</td>\n      <td>1.0</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10010058</td>\n      <td>26359957</td>\n      <td>Other</td>\n      <td>?</td>\n      <td>MARRIED</td>\n      <td>Asian</td>\n      <td>2147-11-19 04:00:00</td>\n      <td>2.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>10010867</td>\n      <td>22429197</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>10011365</td>\n      <td>26712576</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>White</td>\n      <td>2166-02-20 00:20:00</td>\n      <td>1.0</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>10011427</td>\n      <td>20219031</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>White</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>10012438</td>\n      <td>22764825</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10014610</td>\n      <td>23258342</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Black/African American</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 17,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107759383
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# unique patients in pharmacological restraint data\n",
        "combined_df['hadm_id'].nunique()\n",
        "# 29471"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 18,
          "data": {
            "text/plain": "29462"
          },
          "metadata": {}
        }
      ],
      "execution_count": 18,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107759682
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Neither dataframe\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "pd.set_option('display.max_rows', 100)\n",
        "pd.set_option('display.max_columns', 50)\n",
        "\n",
        "\n",
        "norestraints = \"downloaded_data/neither.csv\"\n",
        "\n",
        "no = pd.read_csv(norestraints)\n",
        "no\n",
        "\n",
        "# 38862 rows total - but duplicate subject_id, didn't remove these at this time because want to bring in hadm_id and stay_id"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 19,
          "data": {
            "text/plain": "       subject_id   stay_id   hadm_id insurance language marital_status  \\\n0        10786070  37724991  29289999     Other  ENGLISH        MARRIED   \n1        13024347  35698364  21355222     Other  ENGLISH         SINGLE   \n2        13484152  35078394  21503453     Other  ENGLISH        MARRIED   \n3        13609009  36896921  22170101  Medicare  ENGLISH        WIDOWED   \n4        13851330  39444788  21339457     Other        ?        MARRIED   \n...           ...       ...       ...       ...      ...            ...   \n38857    19911133  32315584  25625808  Medicare  ENGLISH        WIDOWED   \n38858    19928907  38684003  20127009  Medicaid        ?        MARRIED   \n38859    19928907  38684003  20127009  Medicaid        ?        MARRIED   \n38860    19957626  38817551  23821950     Other  ENGLISH        MARRIED   \n38861    19957626  38817551  23821950     Other  ENGLISH        MARRIED   \n\n                                     race  \n0                                   WHITE  \n1                                   WHITE  \n2                                   WHITE  \n3                                   WHITE  \n4      HISPANIC/LATINO - CENTRAL AMERICAN  \n...                                   ...  \n38857                               WHITE  \n38858                               OTHER  \n38859                             UNKNOWN  \n38860              WHITE - OTHER EUROPEAN  \n38861                               WHITE  \n\n[38862 rows x 7 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>stay_id</th>\n      <th>hadm_id</th>\n      <th>insurance</th>\n      <th>language</th>\n      <th>marital_status</th>\n      <th>race</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10786070</td>\n      <td>37724991</td>\n      <td>29289999</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>WHITE</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>13024347</td>\n      <td>35698364</td>\n      <td>21355222</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>WHITE</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>13484152</td>\n      <td>35078394</td>\n      <td>21503453</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>WHITE</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13609009</td>\n      <td>36896921</td>\n      <td>22170101</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>WHITE</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13851330</td>\n      <td>39444788</td>\n      <td>21339457</td>\n      <td>Other</td>\n      <td>?</td>\n      <td>MARRIED</td>\n      <td>HISPANIC/LATINO - CENTRAL AMERICAN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>38857</th>\n      <td>19911133</td>\n      <td>32315584</td>\n      <td>25625808</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>WHITE</td>\n    </tr>\n    <tr>\n      <th>38858</th>\n      <td>19928907</td>\n      <td>38684003</td>\n      <td>20127009</td>\n      <td>Medicaid</td>\n      <td>?</td>\n      <td>MARRIED</td>\n      <td>OTHER</td>\n    </tr>\n    <tr>\n      <th>38859</th>\n      <td>19928907</td>\n      <td>38684003</td>\n      <td>20127009</td>\n      <td>Medicaid</td>\n      <td>?</td>\n      <td>MARRIED</td>\n      <td>UNKNOWN</td>\n    </tr>\n    <tr>\n      <th>38860</th>\n      <td>19957626</td>\n      <td>38817551</td>\n      <td>23821950</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>WHITE - OTHER EUROPEAN</td>\n    </tr>\n    <tr>\n      <th>38861</th>\n      <td>19957626</td>\n      <td>38817551</td>\n      <td>23821950</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>WHITE</td>\n    </tr>\n  </tbody>\n</table>\n<p>38862 rows × 7 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 19,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107759965
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# unique patients in pharmacological restraint data\n",
        "no['subject_id'].nunique()\n",
        "# 24683"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "24683"
          },
          "metadata": {}
        }
      ],
      "execution_count": 20,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107760290
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mapping race\n",
        "no['race'] = no['race'].str.lower()\n",
        "\n",
        "# Replace values in the 'race' column using the mapping\n",
        "no['race'] = no['race'].replace(race_mapping)\n",
        "\n",
        "# Display the modified DataFrame\n",
        "no.head(10)\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 21,
          "data": {
            "text/plain": "   subject_id   stay_id   hadm_id insurance language marital_status  \\\n0    10786070  37724991  29289999     Other  ENGLISH        MARRIED   \n1    13024347  35698364  21355222     Other  ENGLISH         SINGLE   \n2    13484152  35078394  21503453     Other  ENGLISH        MARRIED   \n3    13609009  36896921  22170101  Medicare  ENGLISH        WIDOWED   \n4    13851330  39444788  21339457     Other        ?        MARRIED   \n5    13883022  39923997  26259555     Other        ?        MARRIED   \n6    14041510  36713711  26602358     Other  ENGLISH         SINGLE   \n7    16313008  32226077  25236017     Other  ENGLISH       DIVORCED   \n8    17017707  30566101  22354445     Other  ENGLISH        MARRIED   \n9    18766342  30509339  27513687     Other  ENGLISH         SINGLE   \n\n              race  \n0            White  \n1            White  \n2            White  \n3            White  \n4  Hispanic/Latino  \n5            Other  \n6            White  \n7            White  \n8            Other  \n9            Other  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>stay_id</th>\n      <th>hadm_id</th>\n      <th>insurance</th>\n      <th>language</th>\n      <th>marital_status</th>\n      <th>race</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10786070</td>\n      <td>37724991</td>\n      <td>29289999</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>White</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>13024347</td>\n      <td>35698364</td>\n      <td>21355222</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>13484152</td>\n      <td>35078394</td>\n      <td>21503453</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>White</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13609009</td>\n      <td>36896921</td>\n      <td>22170101</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>White</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13851330</td>\n      <td>39444788</td>\n      <td>21339457</td>\n      <td>Other</td>\n      <td>?</td>\n      <td>MARRIED</td>\n      <td>Hispanic/Latino</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>13883022</td>\n      <td>39923997</td>\n      <td>26259555</td>\n      <td>Other</td>\n      <td>?</td>\n      <td>MARRIED</td>\n      <td>Other</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>14041510</td>\n      <td>36713711</td>\n      <td>26602358</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>16313008</td>\n      <td>32226077</td>\n      <td>25236017</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>DIVORCED</td>\n      <td>White</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>17017707</td>\n      <td>30566101</td>\n      <td>22354445</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>Other</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>18766342</td>\n      <td>30509339</td>\n      <td>27513687</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>Other</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 21,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107760692
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Joining no and combined"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "combined_df.columns"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 22,
          "data": {
            "text/plain": "Index(['subject_id', 'hadm_id', 'insurance', 'language', 'marital_status',\n       'race', 'deathtime', 'pharmrestraintdays', 'physicalrestraintdays'],\n      dtype='object')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 22,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107760969
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "no.columns"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 23,
          "data": {
            "text/plain": "Index(['subject_id', 'stay_id', 'hadm_id', 'insurance', 'language',\n       'marital_status', 'race'],\n      dtype='object')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 23,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107761227
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop deathtime from combined_df\n",
        "combined_df.drop(columns=['deathtime'], inplace=True)\n",
        "\n",
        "# Add 'pharmrestraintdays' and 'physicalrestraintdays' columns with NaN values\n",
        "no['pharmrestraintdays'] = float('nan')\n",
        "no['physicalrestraintdays'] = float('nan')\n",
        "\n",
        "# Concatenate both DataFrames\n",
        "combined_df = pd.concat([no, combined_df], ignore_index=True)\n",
        "\n",
        "# Display the concatenated DataFrame\n",
        "combined_df\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 24,
          "data": {
            "text/plain": "       subject_id     stay_id   hadm_id insurance language marital_status  \\\n0        10786070  37724991.0  29289999     Other  ENGLISH        MARRIED   \n1        13024347  35698364.0  21355222     Other  ENGLISH         SINGLE   \n2        13484152  35078394.0  21503453     Other  ENGLISH        MARRIED   \n3        13609009  36896921.0  22170101  Medicare  ENGLISH        WIDOWED   \n4        13851330  39444788.0  21339457     Other        ?        MARRIED   \n...           ...         ...       ...       ...      ...            ...   \n68319    17660536         NaN  29997844       NaN      NaN            NaN   \n68320    17624950         NaN  29998113       NaN      NaN            NaN   \n68321    19989305         NaN  29998115       NaN      NaN            NaN   \n68322    15129243         NaN  29999098       NaN      NaN            NaN   \n68323    10355856         NaN  29999625       NaN      NaN            NaN   \n\n                  race  pharmrestraintdays  physicalrestraintdays  \n0                White                 NaN                    NaN  \n1                White                 NaN                    NaN  \n2                White                 NaN                    NaN  \n3                White                 NaN                    NaN  \n4      Hispanic/Latino                 NaN                    NaN  \n...                ...                 ...                    ...  \n68319              NaN                 0.0                    2.0  \n68320              NaN                 0.0                    1.0  \n68321              NaN                 0.0                    2.0  \n68322              NaN                 0.0                    9.0  \n68323              NaN                 0.0                   21.0  \n\n[68324 rows x 9 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>stay_id</th>\n      <th>hadm_id</th>\n      <th>insurance</th>\n      <th>language</th>\n      <th>marital_status</th>\n      <th>race</th>\n      <th>pharmrestraintdays</th>\n      <th>physicalrestraintdays</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10786070</td>\n      <td>37724991.0</td>\n      <td>29289999</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>White</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>13024347</td>\n      <td>35698364.0</td>\n      <td>21355222</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>13484152</td>\n      <td>35078394.0</td>\n      <td>21503453</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>White</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13609009</td>\n      <td>36896921.0</td>\n      <td>22170101</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>White</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13851330</td>\n      <td>39444788.0</td>\n      <td>21339457</td>\n      <td>Other</td>\n      <td>?</td>\n      <td>MARRIED</td>\n      <td>Hispanic/Latino</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>68319</th>\n      <td>17660536</td>\n      <td>NaN</td>\n      <td>29997844</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>68320</th>\n      <td>17624950</td>\n      <td>NaN</td>\n      <td>29998113</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>68321</th>\n      <td>19989305</td>\n      <td>NaN</td>\n      <td>29998115</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>68322</th>\n      <td>15129243</td>\n      <td>NaN</td>\n      <td>29999098</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>9.0</td>\n    </tr>\n    <tr>\n      <th>68323</th>\n      <td>10355856</td>\n      <td>NaN</td>\n      <td>29999625</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>21.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>68324 rows × 9 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 24,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107761489
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Summarizing the No Restraints group\n",
        "\n",
        "race_counts = no.groupby('race')['subject_id'].count().reset_index()\n",
        "race_counts.columns = ['Race', 'Count']\n",
        "race_counts"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 25,
          "data": {
            "text/plain": "                                        Race  Count\n0              American Indian/Alaska Native     75\n1                                      Asian   1366\n2                     Black/African American   5029\n3                            Hispanic/Latino   1843\n4  Native Hawaiian or Other Pacific Islander     46\n5                                      Other   4658\n6                                      White  25845",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Race</th>\n      <th>Count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>American Indian/Alaska Native</td>\n      <td>75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Asian</td>\n      <td>1366</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Black/African American</td>\n      <td>5029</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Hispanic/Latino</td>\n      <td>1843</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Native Hawaiian or Other Pacific Islander</td>\n      <td>46</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Other</td>\n      <td>4658</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>White</td>\n      <td>25845</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 25,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107761824
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot of No restraints group\n",
        "\n",
        "# Sorting by Count column in descending order\n",
        "race_counts = race_counts.sort_values(by='Count', ascending=True)\n",
        "\n",
        "# Plotting\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.barh(race_counts['Race'], race_counts['Count'], color='skyblue')\n",
        "plt.xlabel('Count')\n",
        "plt.ylabel('Race')\n",
        "plt.title('Count of People by Race (Sorted)')\n",
        "plt.tight_layout()\n",
        "\n",
        "# Displaying the plot\n",
        "plt.show()\n"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1000x600 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": 26,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107762309
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Combining pharm, physical, and neither dataframes together\n",
        "\n",
        "# Assuming combined_df and no are your DataFrames\n",
        "# Merge the two DataFrames on subject_id, insurance, language, marital_status, and race\n",
        "# merged_df = pd.merge(combined_df, no, on=['subject_id', 'hadm_id'], how='outer')\n",
        "\n",
        "merged_df= combined_df\n",
        "\n",
        "# Create a new column 'restrainttype' based on conditions\n",
        "merged_df['restrainttype'] = 'None'\n",
        "merged_df.loc[(merged_df['physicalrestraintdays'].isna()) & (merged_df['pharmrestraintdays'].isna()), 'restrainttype'] = 'None'\n",
        "merged_df.loc[(merged_df['physicalrestraintdays'] > 0) & (merged_df['pharmrestraintdays'] == 0), 'restrainttype'] = 'Physical'\n",
        "merged_df.loc[(merged_df['pharmrestraintdays'] > 0) & (merged_df['physicalrestraintdays'] == 0), 'restrainttype'] = 'Medical'\n",
        "merged_df.loc[(merged_df['physicalrestraintdays'] > 0) & (merged_df['pharmrestraintdays'] > 0), 'restrainttype'] = 'Physical and Medical'\n",
        "\n",
        "# Drop duplicate columns (_y) for insurance, language, marital_status, and race if they exist\n",
        "columns_to_drop = ['insurance_y', 'language_y', 'marital_status_y', 'race_y']\n",
        "merged_df = merged_df.drop(columns=[col for col in columns_to_drop if col in merged_df.columns], errors='ignore')\n",
        "\n",
        "# Optionally, rename the remaining duplicate columns (_x) to remove the suffix\n",
        "merged_df = merged_df.rename(columns={'insurance_x': 'insurance', 'language_x': 'language', 'marital_status_x': 'marital_status', 'race_x': 'race'})\n",
        "\n",
        "merged_df\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 27,
          "data": {
            "text/plain": "       subject_id     stay_id   hadm_id insurance language marital_status  \\\n0        10786070  37724991.0  29289999     Other  ENGLISH        MARRIED   \n1        13024347  35698364.0  21355222     Other  ENGLISH         SINGLE   \n2        13484152  35078394.0  21503453     Other  ENGLISH        MARRIED   \n3        13609009  36896921.0  22170101  Medicare  ENGLISH        WIDOWED   \n4        13851330  39444788.0  21339457     Other        ?        MARRIED   \n...           ...         ...       ...       ...      ...            ...   \n68319    17660536         NaN  29997844       NaN      NaN            NaN   \n68320    17624950         NaN  29998113       NaN      NaN            NaN   \n68321    19989305         NaN  29998115       NaN      NaN            NaN   \n68322    15129243         NaN  29999098       NaN      NaN            NaN   \n68323    10355856         NaN  29999625       NaN      NaN            NaN   \n\n                  race  pharmrestraintdays  physicalrestraintdays  \\\n0                White                 NaN                    NaN   \n1                White                 NaN                    NaN   \n2                White                 NaN                    NaN   \n3                White                 NaN                    NaN   \n4      Hispanic/Latino                 NaN                    NaN   \n...                ...                 ...                    ...   \n68319              NaN                 0.0                    2.0   \n68320              NaN                 0.0                    1.0   \n68321              NaN                 0.0                    2.0   \n68322              NaN                 0.0                    9.0   \n68323              NaN                 0.0                   21.0   \n\n      restrainttype  \n0              None  \n1              None  \n2              None  \n3              None  \n4              None  \n...             ...  \n68319      Physical  \n68320      Physical  \n68321      Physical  \n68322      Physical  \n68323      Physical  \n\n[68324 rows x 10 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>stay_id</th>\n      <th>hadm_id</th>\n      <th>insurance</th>\n      <th>language</th>\n      <th>marital_status</th>\n      <th>race</th>\n      <th>pharmrestraintdays</th>\n      <th>physicalrestraintdays</th>\n      <th>restrainttype</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10786070</td>\n      <td>37724991.0</td>\n      <td>29289999</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>White</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>13024347</td>\n      <td>35698364.0</td>\n      <td>21355222</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>White</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>13484152</td>\n      <td>35078394.0</td>\n      <td>21503453</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>MARRIED</td>\n      <td>White</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13609009</td>\n      <td>36896921.0</td>\n      <td>22170101</td>\n      <td>Medicare</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>White</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13851330</td>\n      <td>39444788.0</td>\n      <td>21339457</td>\n      <td>Other</td>\n      <td>?</td>\n      <td>MARRIED</td>\n      <td>Hispanic/Latino</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>68319</th>\n      <td>17660536</td>\n      <td>NaN</td>\n      <td>29997844</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>Physical</td>\n    </tr>\n    <tr>\n      <th>68320</th>\n      <td>17624950</td>\n      <td>NaN</td>\n      <td>29998113</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>Physical</td>\n    </tr>\n    <tr>\n      <th>68321</th>\n      <td>19989305</td>\n      <td>NaN</td>\n      <td>29998115</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>Physical</td>\n    </tr>\n    <tr>\n      <th>68322</th>\n      <td>15129243</td>\n      <td>NaN</td>\n      <td>29999098</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>9.0</td>\n      <td>Physical</td>\n    </tr>\n    <tr>\n      <th>68323</th>\n      <td>10355856</td>\n      <td>NaN</td>\n      <td>29999625</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>21.0</td>\n      <td>Physical</td>\n    </tr>\n  </tbody>\n</table>\n<p>68324 rows × 10 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 27,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107762767
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Looking at total numbers\n",
        "summary_table = merged_df.groupby('restrainttype').agg({'subject_id': 'count', 'hadm_id': 'nunique'})\n",
        "summary_table.columns = ['subject_id_count', 'hadm_id_count']\n",
        "summary_table\n",
        "\n",
        "# there are duplicate patients in subject_id, especially for None, remove duplicates for all? and limit to first encounteR? "
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 28,
          "data": {
            "text/plain": "                      subject_id_count  hadm_id_count\nrestrainttype                                        \nMedical                           2045           2045\nNone                             38862          28948\nPhysical                         23718          23718\nPhysical and Medical              3699           3699",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id_count</th>\n      <th>hadm_id_count</th>\n    </tr>\n    <tr>\n      <th>restrainttype</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Medical</th>\n      <td>2045</td>\n      <td>2045</td>\n    </tr>\n    <tr>\n      <th>None</th>\n      <td>38862</td>\n      <td>28948</td>\n    </tr>\n    <tr>\n      <th>Physical</th>\n      <td>23718</td>\n      <td>23718</td>\n    </tr>\n    <tr>\n      <th>Physical and Medical</th>\n      <td>3699</td>\n      <td>3699</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 28,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107763185
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install azure-storage-blob"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Requirement already satisfied: azure-storage-blob in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (12.13.0)\r\nRequirement already satisfied: msrest>=0.6.21 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from azure-storage-blob) (0.7.1)\r\nRequirement already satisfied: azure-core<2.0.0,>=1.23.1 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from azure-storage-blob) (1.26.4)\r\nRequirement already satisfied: cryptography>=2.1.4 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from azure-storage-blob) (38.0.4)\r\nRequirement already satisfied: requests-oauthlib>=0.5.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from msrest>=0.6.21->azure-storage-blob) (1.3.1)\r\nRequirement already satisfied: certifi>=2017.4.17 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from msrest>=0.6.21->azure-storage-blob) (2022.9.24)\r\nRequirement already satisfied: requests~=2.16 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from msrest>=0.6.21->azure-storage-blob) (2.31.0)\r\nRequirement already satisfied: isodate>=0.6.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from msrest>=0.6.21->azure-storage-blob) (0.6.1)\r\nRequirement already satisfied: six>=1.11.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from azure-core<2.0.0,>=1.23.1->azure-storage-blob) (1.16.0)\r\nRequirement already satisfied: typing-extensions>=4.3.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from azure-core<2.0.0,>=1.23.1->azure-storage-blob) (4.6.0)\r\nRequirement already satisfied: cffi>=1.12 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from cryptography>=2.1.4->azure-storage-blob) (1.15.1)\r\nRequirement already satisfied: oauthlib>=3.0.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from requests-oauthlib>=0.5.0->msrest>=0.6.21->azure-storage-blob) (3.2.2)\r\nRequirement already satisfied: charset-normalizer<4,>=2 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from requests~=2.16->msrest>=0.6.21->azure-storage-blob) (3.1.0)\r\nRequirement already satisfied: urllib3<3,>=1.21.1 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from requests~=2.16->msrest>=0.6.21->azure-storage-blob) (1.26.16)\r\nRequirement already satisfied: idna<4,>=2.5 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from requests~=2.16->msrest>=0.6.21->azure-storage-blob) (3.4)\r\nRequirement already satisfied: pycparser in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from cffi>=1.12->cryptography>=2.1.4->azure-storage-blob) (2.21)\r\n"
        }
      ],
      "execution_count": 29,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": true
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Importing and Incorporating Admissions Table"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "admissions = dfs['admission']\n",
        "admissions.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 31,
          "data": {
            "text/plain": "   subject_id   hadm_id            admittime            dischtime deathtime  \\\n0    10000032  22595853  2180-05-06 22:23:00  2180-05-07 17:15:00       NaN   \n1    10000032  22841357  2180-06-26 18:27:00  2180-06-27 18:49:00       NaN   \n2    10000032  25742920  2180-08-05 23:44:00  2180-08-07 17:50:00       NaN   \n3    10000032  29079034  2180-07-23 12:35:00  2180-07-25 17:55:00       NaN   \n4    10000068  25022803  2160-03-03 23:16:00  2160-03-04 06:26:00       NaN   \n\n   admission_type admit_provider_id      admission_location  \\\n0          URGENT            P874LG  TRANSFER FROM HOSPITAL   \n1        EW EMER.            P09Q6Y          EMERGENCY ROOM   \n2        EW EMER.            P60CC5          EMERGENCY ROOM   \n3        EW EMER.            P30KEH          EMERGENCY ROOM   \n4  EU OBSERVATION            P51VDL          EMERGENCY ROOM   \n\n  discharge_location insurance language marital_status   race  \\\n0               HOME     Other  ENGLISH        WIDOWED  WHITE   \n1               HOME  Medicaid  ENGLISH        WIDOWED  WHITE   \n2            HOSPICE  Medicaid  ENGLISH        WIDOWED  WHITE   \n3               HOME  Medicaid  ENGLISH        WIDOWED  WHITE   \n4                NaN     Other  ENGLISH         SINGLE  WHITE   \n\n             edregtime            edouttime  hospital_expire_flag  \n0  2180-05-06 19:17:00  2180-05-06 23:30:00                     0  \n1  2180-06-26 15:54:00  2180-06-26 21:31:00                     0  \n2  2180-08-05 20:58:00  2180-08-06 01:44:00                     0  \n3  2180-07-23 05:54:00  2180-07-23 14:00:00                     0  \n4  2160-03-03 21:55:00  2160-03-04 06:26:00                     0  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>admittime</th>\n      <th>dischtime</th>\n      <th>deathtime</th>\n      <th>admission_type</th>\n      <th>admit_provider_id</th>\n      <th>admission_location</th>\n      <th>discharge_location</th>\n      <th>insurance</th>\n      <th>language</th>\n      <th>marital_status</th>\n      <th>race</th>\n      <th>edregtime</th>\n      <th>edouttime</th>\n      <th>hospital_expire_flag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10000032</td>\n      <td>22595853</td>\n      <td>2180-05-06 22:23:00</td>\n      <td>2180-05-07 17:15:00</td>\n      <td>NaN</td>\n      <td>URGENT</td>\n      <td>P874LG</td>\n      <td>TRANSFER FROM HOSPITAL</td>\n      <td>HOME</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>WHITE</td>\n      <td>2180-05-06 19:17:00</td>\n      <td>2180-05-06 23:30:00</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10000032</td>\n      <td>22841357</td>\n      <td>2180-06-26 18:27:00</td>\n      <td>2180-06-27 18:49:00</td>\n      <td>NaN</td>\n      <td>EW EMER.</td>\n      <td>P09Q6Y</td>\n      <td>EMERGENCY ROOM</td>\n      <td>HOME</td>\n      <td>Medicaid</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>WHITE</td>\n      <td>2180-06-26 15:54:00</td>\n      <td>2180-06-26 21:31:00</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10000032</td>\n      <td>25742920</td>\n      <td>2180-08-05 23:44:00</td>\n      <td>2180-08-07 17:50:00</td>\n      <td>NaN</td>\n      <td>EW EMER.</td>\n      <td>P60CC5</td>\n      <td>EMERGENCY ROOM</td>\n      <td>HOSPICE</td>\n      <td>Medicaid</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>WHITE</td>\n      <td>2180-08-05 20:58:00</td>\n      <td>2180-08-06 01:44:00</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10000032</td>\n      <td>29079034</td>\n      <td>2180-07-23 12:35:00</td>\n      <td>2180-07-25 17:55:00</td>\n      <td>NaN</td>\n      <td>EW EMER.</td>\n      <td>P30KEH</td>\n      <td>EMERGENCY ROOM</td>\n      <td>HOME</td>\n      <td>Medicaid</td>\n      <td>ENGLISH</td>\n      <td>WIDOWED</td>\n      <td>WHITE</td>\n      <td>2180-07-23 05:54:00</td>\n      <td>2180-07-23 14:00:00</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10000068</td>\n      <td>25022803</td>\n      <td>2160-03-03 23:16:00</td>\n      <td>2160-03-04 06:26:00</td>\n      <td>NaN</td>\n      <td>EU OBSERVATION</td>\n      <td>P51VDL</td>\n      <td>EMERGENCY ROOM</td>\n      <td>NaN</td>\n      <td>Other</td>\n      <td>ENGLISH</td>\n      <td>SINGLE</td>\n      <td>WHITE</td>\n      <td>2160-03-03 21:55:00</td>\n      <td>2160-03-04 06:26:00</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 31,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107768653
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "patients = dfs['patient']\n",
        "print(\"total rows: \", len(patients.index))\n",
        "patients"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "total rows:  299712\n"
        },
        {
          "output_type": "execute_result",
          "execution_count": 32,
          "data": {
            "text/plain": "        subject_id gender  anchor_age  anchor_year anchor_year_group  \\\n0         10000032      F          52         2180       2014 - 2016   \n1         10000048      F          23         2126       2008 - 2010   \n2         10000068      F          19         2160       2008 - 2010   \n3         10000084      M          72         2160       2017 - 2019   \n4         10000102      F          27         2136       2008 - 2010   \n...            ...    ...         ...          ...               ...   \n299707    19999828      F          46         2147       2017 - 2019   \n299708    19999829      F          28         2186       2008 - 2010   \n299709    19999840      M          58         2164       2008 - 2010   \n299710    19999914      F          49         2158       2017 - 2019   \n299711    19999987      F          57         2145       2011 - 2013   \n\n               dod  \n0       2180-09-09  \n1              NaN  \n2              NaN  \n3       2161-02-13  \n4              NaN  \n...            ...  \n299707         NaN  \n299708         NaN  \n299709  2164-09-17  \n299710         NaN  \n299711         NaN  \n\n[299712 rows x 6 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>gender</th>\n      <th>anchor_age</th>\n      <th>anchor_year</th>\n      <th>anchor_year_group</th>\n      <th>dod</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10000032</td>\n      <td>F</td>\n      <td>52</td>\n      <td>2180</td>\n      <td>2014 - 2016</td>\n      <td>2180-09-09</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10000048</td>\n      <td>F</td>\n      <td>23</td>\n      <td>2126</td>\n      <td>2008 - 2010</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10000068</td>\n      <td>F</td>\n      <td>19</td>\n      <td>2160</td>\n      <td>2008 - 2010</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10000084</td>\n      <td>M</td>\n      <td>72</td>\n      <td>2160</td>\n      <td>2017 - 2019</td>\n      <td>2161-02-13</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10000102</td>\n      <td>F</td>\n      <td>27</td>\n      <td>2136</td>\n      <td>2008 - 2010</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>299707</th>\n      <td>19999828</td>\n      <td>F</td>\n      <td>46</td>\n      <td>2147</td>\n      <td>2017 - 2019</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>299708</th>\n      <td>19999829</td>\n      <td>F</td>\n      <td>28</td>\n      <td>2186</td>\n      <td>2008 - 2010</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>299709</th>\n      <td>19999840</td>\n      <td>M</td>\n      <td>58</td>\n      <td>2164</td>\n      <td>2008 - 2010</td>\n      <td>2164-09-17</td>\n    </tr>\n    <tr>\n      <th>299710</th>\n      <td>19999914</td>\n      <td>F</td>\n      <td>49</td>\n      <td>2158</td>\n      <td>2017 - 2019</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>299711</th>\n      <td>19999987</td>\n      <td>F</td>\n      <td>57</td>\n      <td>2145</td>\n      <td>2011 - 2013</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>299712 rows × 6 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 32,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107768960
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Cleaning Merged dataframe - dropping all variables and merging back in with admissions dataframe\n",
        "\n",
        "# Drop all variables from merged_df except subject_id, hadm_id, and pharmrestraintday\n",
        "merged_df = merged_df[['subject_id', 'hadm_id', 'pharmrestraintdays', 'physicalrestraintdays', 'restrainttype' ]].copy()\n",
        "\n",
        "# Join variables from admissions dataframe\n",
        "merged_df = merged_df.merge(admissions[['hadm_id', 'admittime', 'dischtime', 'deathtime', 'race', 'hospital_expire_flag']], on='hadm_id', how='left')\n",
        "\n",
        "# Replace values in the 'race' column using the mapping\n",
        "merged_df['race'] = merged_df['race'].str.lower()\n",
        "\n",
        "merged_df['race'] = merged_df['race'].replace(race_mapping)\n",
        "\n",
        "# Define conditions for the new column\n",
        "conditions = [\n",
        "    (merged_df['restrainttype'].isin(['Medical', 'Physical', 'Physical and Medical'])),\n",
        "    (merged_df['restrainttype'] == 'None')\n",
        "]\n",
        "\n",
        "# Define values for each condition\n",
        "values = ['Restraints', 'No Restraints']\n",
        "\n",
        "# Create the new column based on conditions\n",
        "merged_df['restraint_status'] = np.select(conditions, values, default='Unknown')\n",
        "\n",
        "# Sort merged_df first by subject_id (smallest to largest) then by hadm_id (smallest to largest)\n",
        "merged_df_sorted = merged_df.sort_values(by=['subject_id', 'hadm_id'])\n",
        "\n",
        "# Remove all duplicate entries keeping the earliest hadm_id\n",
        "merged_df_unique = merged_df_sorted.drop_duplicates(subset='subject_id', keep='first')\n",
        "\n",
        "\n",
        "merged_df\n",
        "\n",
        "#68324 before removing duplicates\n",
        "# same number after duplicates removed"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 33,
          "data": {
            "text/plain": "       subject_id   hadm_id  pharmrestraintdays  physicalrestraintdays  \\\n0        10786070  29289999                 NaN                    NaN   \n1        13024347  21355222                 NaN                    NaN   \n2        13484152  21503453                 NaN                    NaN   \n3        13609009  22170101                 NaN                    NaN   \n4        13851330  21339457                 NaN                    NaN   \n...           ...       ...                 ...                    ...   \n68319    17660536  29997844                 0.0                    2.0   \n68320    17624950  29998113                 0.0                    1.0   \n68321    19989305  29998115                 0.0                    2.0   \n68322    15129243  29999098                 0.0                    9.0   \n68323    10355856  29999625                 0.0                   21.0   \n\n      restrainttype            admittime            dischtime  \\\n0              None  2113-01-22 00:00:00  2113-01-23 14:20:00   \n1              None  2143-11-13 06:22:00  2143-11-14 14:45:00   \n2              None  2121-10-29 00:00:00  2121-10-31 12:20:00   \n3              None  2187-07-24 20:35:00  2187-07-25 14:00:00   \n4              None  2181-09-29 08:09:00  2181-09-30 13:55:00   \n...             ...                  ...                  ...   \n68319      Physical  2125-02-16 20:10:00  2125-03-03 16:21:00   \n68320      Physical  2129-10-06 05:58:00  2129-10-10 13:00:00   \n68321      Physical  2154-05-06 03:02:00  2154-05-20 15:40:00   \n68322      Physical  2128-06-09 23:45:00  2128-06-20 11:25:00   \n68323      Physical  2157-11-07 11:18:00  2157-12-22 20:45:00   \n\n                 deathtime             race  hospital_expire_flag  \\\n0                      NaN            White                     0   \n1                      NaN            White                     0   \n2                      NaN            White                     0   \n3                      NaN            White                     0   \n4                      NaN  Hispanic/Latino                     0   \n...                    ...              ...                   ...   \n68319                  NaN            White                     0   \n68320                  NaN            White                     0   \n68321                  NaN            White                     0   \n68322  2128-06-20 11:25:00            White                     1   \n68323                  NaN            Other                     0   \n\n      restraint_status  \n0        No Restraints  \n1        No Restraints  \n2        No Restraints  \n3        No Restraints  \n4        No Restraints  \n...                ...  \n68319       Restraints  \n68320       Restraints  \n68321       Restraints  \n68322       Restraints  \n68323       Restraints  \n\n[68324 rows x 11 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>pharmrestraintdays</th>\n      <th>physicalrestraintdays</th>\n      <th>restrainttype</th>\n      <th>admittime</th>\n      <th>dischtime</th>\n      <th>deathtime</th>\n      <th>race</th>\n      <th>hospital_expire_flag</th>\n      <th>restraint_status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10786070</td>\n      <td>29289999</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2113-01-22 00:00:00</td>\n      <td>2113-01-23 14:20:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>13024347</td>\n      <td>21355222</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2143-11-13 06:22:00</td>\n      <td>2143-11-14 14:45:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>13484152</td>\n      <td>21503453</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2121-10-29 00:00:00</td>\n      <td>2121-10-31 12:20:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13609009</td>\n      <td>22170101</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2187-07-24 20:35:00</td>\n      <td>2187-07-25 14:00:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13851330</td>\n      <td>21339457</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2181-09-29 08:09:00</td>\n      <td>2181-09-30 13:55:00</td>\n      <td>NaN</td>\n      <td>Hispanic/Latino</td>\n      <td>0</td>\n      <td>No Restraints</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>68319</th>\n      <td>17660536</td>\n      <td>29997844</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>Physical</td>\n      <td>2125-02-16 20:10:00</td>\n      <td>2125-03-03 16:21:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>Restraints</td>\n    </tr>\n    <tr>\n      <th>68320</th>\n      <td>17624950</td>\n      <td>29998113</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>Physical</td>\n      <td>2129-10-06 05:58:00</td>\n      <td>2129-10-10 13:00:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>Restraints</td>\n    </tr>\n    <tr>\n      <th>68321</th>\n      <td>19989305</td>\n      <td>29998115</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>Physical</td>\n      <td>2154-05-06 03:02:00</td>\n      <td>2154-05-20 15:40:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>Restraints</td>\n    </tr>\n    <tr>\n      <th>68322</th>\n      <td>15129243</td>\n      <td>29999098</td>\n      <td>0.0</td>\n      <td>9.0</td>\n      <td>Physical</td>\n      <td>2128-06-09 23:45:00</td>\n      <td>2128-06-20 11:25:00</td>\n      <td>2128-06-20 11:25:00</td>\n      <td>White</td>\n      <td>1</td>\n      <td>Restraints</td>\n    </tr>\n    <tr>\n      <th>68323</th>\n      <td>10355856</td>\n      <td>29999625</td>\n      <td>0.0</td>\n      <td>21.0</td>\n      <td>Physical</td>\n      <td>2157-11-07 11:18:00</td>\n      <td>2157-12-22 20:45:00</td>\n      <td>NaN</td>\n      <td>Other</td>\n      <td>0</td>\n      <td>Restraints</td>\n    </tr>\n  </tbody>\n</table>\n<p>68324 rows × 11 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 33,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107769257
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Importing Height"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# height dataframe\n",
        "import pandas as pd\n",
        "pd.set_option('display.max_rows', 100)\n",
        "pd.set_option('display.max_columns', 50)\n",
        "\n",
        "height = \"downloaded_data/height.csv\"\n",
        "\n",
        "height = pd.read_csv(height)\n",
        "height"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 34,
          "data": {
            "text/plain": "       subject_id   stay_id  height\n0        10103795  31411464     NaN\n1        10204259  37256780     NaN\n2        11775129  35758091     NaN\n3        13407727  39514195     NaN\n4        13501602  38330643     NaN\n...           ...       ...     ...\n73176    11655904  38016420  147.00\n73177    19462953  37996113  147.00\n73178    19956723  39044491  147.00\n73179    11463939  31023514  147.00\n73180    15526304  32437687  186.69\n\n[73181 rows x 3 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>stay_id</th>\n      <th>height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10103795</td>\n      <td>31411464</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10204259</td>\n      <td>37256780</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>11775129</td>\n      <td>35758091</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13407727</td>\n      <td>39514195</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13501602</td>\n      <td>38330643</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>73176</th>\n      <td>11655904</td>\n      <td>38016420</td>\n      <td>147.00</td>\n    </tr>\n    <tr>\n      <th>73177</th>\n      <td>19462953</td>\n      <td>37996113</td>\n      <td>147.00</td>\n    </tr>\n    <tr>\n      <th>73178</th>\n      <td>19956723</td>\n      <td>39044491</td>\n      <td>147.00</td>\n    </tr>\n    <tr>\n      <th>73179</th>\n      <td>11463939</td>\n      <td>31023514</td>\n      <td>147.00</td>\n    </tr>\n    <tr>\n      <th>73180</th>\n      <td>15526304</td>\n      <td>32437687</td>\n      <td>186.69</td>\n    </tr>\n  </tbody>\n</table>\n<p>73181 rows × 3 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 34,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107769604
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Importing Weight"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# weight dataframe\n",
        "import pandas as pd\n",
        "pd.set_option('display.max_rows', 100)\n",
        "pd.set_option('display.max_columns', 50)\n",
        "\n",
        "weight = \"downloaded_data/weight.csv\"\n",
        "\n",
        "weight = pd.read_csv(weight)\n",
        "weight"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 35,
          "data": {
            "text/plain": "       subject_id   stay_id  weight_admit  weight  weight_min  weight_max\n0        10735843  38823215           NaN     NaN         NaN         NaN\n1        16609888  34227792           NaN     NaN         NaN         NaN\n2        14817519  32091521           NaN     NaN         NaN         NaN\n3        15250222  36846998           NaN     NaN         NaN         NaN\n4        15739400  33469480           NaN     NaN         NaN         NaN\n...           ...       ...           ...     ...         ...         ...\n73176    11281568  39966506          71.6    71.5        71.3        71.6\n73177    12679321  39272693          79.6    91.5        79.6       102.3\n73178    12545470  34507323          59.8    60.0        59.8        60.4\n73179    16202865  33813722          91.6    92.0        91.6        92.8\n73180    15642021  30537814         100.6   100.0        98.8       100.6\n\n[73181 rows x 6 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>stay_id</th>\n      <th>weight_admit</th>\n      <th>weight</th>\n      <th>weight_min</th>\n      <th>weight_max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10735843</td>\n      <td>38823215</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>16609888</td>\n      <td>34227792</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>14817519</td>\n      <td>32091521</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>15250222</td>\n      <td>36846998</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>15739400</td>\n      <td>33469480</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>73176</th>\n      <td>11281568</td>\n      <td>39966506</td>\n      <td>71.6</td>\n      <td>71.5</td>\n      <td>71.3</td>\n      <td>71.6</td>\n    </tr>\n    <tr>\n      <th>73177</th>\n      <td>12679321</td>\n      <td>39272693</td>\n      <td>79.6</td>\n      <td>91.5</td>\n      <td>79.6</td>\n      <td>102.3</td>\n    </tr>\n    <tr>\n      <th>73178</th>\n      <td>12545470</td>\n      <td>34507323</td>\n      <td>59.8</td>\n      <td>60.0</td>\n      <td>59.8</td>\n      <td>60.4</td>\n    </tr>\n    <tr>\n      <th>73179</th>\n      <td>16202865</td>\n      <td>33813722</td>\n      <td>91.6</td>\n      <td>92.0</td>\n      <td>91.6</td>\n      <td>92.8</td>\n    </tr>\n    <tr>\n      <th>73180</th>\n      <td>15642021</td>\n      <td>30537814</td>\n      <td>100.6</td>\n      <td>100.0</td>\n      <td>98.8</td>\n      <td>100.6</td>\n    </tr>\n  </tbody>\n</table>\n<p>73181 rows × 6 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 35,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107769907
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Importing SOFA"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# SOFA dataframe\n",
        "import pandas as pd\n",
        "pd.set_option('display.max_rows', 100)\n",
        "pd.set_option('display.max_columns', 50)\n",
        "\n",
        "sofa = \"downloaded_data/sofa.csv\"\n",
        "\n",
        "sofa = pd.read_csv(sofa)\n",
        "\n",
        "# Sort the sofa DataFrame by subject_id and hadm_id\n",
        "sofa = sofa.sort_values(by=['subject_id', 'hadm_id'])\n",
        "\n",
        "# Reset the index after sorting\n",
        "sofa.reset_index(drop=True, inplace=True)\n",
        "\n",
        "sofa\n",
        "\n",
        "# Review what this looks like and then decide how to merge and get SOFA score"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 36,
          "data": {
            "text/plain": "       subject_id  hadm_id  icustay_id  SOFA  respiration  coagulation  liver  \\\n0               2   163353      243653     4          NaN          4.0    NaN   \n1               3   145834      211552     7          0.0          0.0    0.0   \n2               4   185777      294638     4          2.0          0.0    1.0   \n3               5   178980      214757     0          NaN          0.0    NaN   \n4               6   107064      228232     4          NaN          0.0    0.0   \n...           ...      ...         ...   ...          ...          ...    ...   \n61527       99985   176670      279638     5          4.0          0.0    0.0   \n61528       99991   151118      226241     4          2.0          0.0    NaN   \n61529       99992   197084      242052     3          NaN          1.0    0.0   \n61530       99995   137810      229633     5          2.0          0.0    2.0   \n61531       99999   113369      246512     2          NaN          0.0    NaN   \n\n       cardiovascular  cns  renal  \n0                 NaN  NaN    NaN  \n1                 4.0  0.0    3.0  \n2                 1.0  0.0    0.0  \n3                 NaN  NaN    NaN  \n4                 0.0  0.0    4.0  \n...               ...  ...    ...  \n61527             1.0  0.0    0.0  \n61528             0.0  1.0    1.0  \n61529             1.0  0.0    1.0  \n61530             1.0  0.0    0.0  \n61531             1.0  0.0    1.0  \n\n[61532 rows x 10 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>icustay_id</th>\n      <th>SOFA</th>\n      <th>respiration</th>\n      <th>coagulation</th>\n      <th>liver</th>\n      <th>cardiovascular</th>\n      <th>cns</th>\n      <th>renal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>163353</td>\n      <td>243653</td>\n      <td>4</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>145834</td>\n      <td>211552</td>\n      <td>7</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>185777</td>\n      <td>294638</td>\n      <td>4</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5</td>\n      <td>178980</td>\n      <td>214757</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6</td>\n      <td>107064</td>\n      <td>228232</td>\n      <td>4</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>61527</th>\n      <td>99985</td>\n      <td>176670</td>\n      <td>279638</td>\n      <td>5</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>61528</th>\n      <td>99991</td>\n      <td>151118</td>\n      <td>226241</td>\n      <td>4</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>61529</th>\n      <td>99992</td>\n      <td>197084</td>\n      <td>242052</td>\n      <td>3</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>61530</th>\n      <td>99995</td>\n      <td>137810</td>\n      <td>229633</td>\n      <td>5</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>61531</th>\n      <td>99999</td>\n      <td>113369</td>\n      <td>246512</td>\n      <td>2</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>61532 rows × 10 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 36,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107770129
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for duplicate values in the 'hadm_id' column\n",
        "duplicate_hadm_ids = sofa['hadm_id'].duplicated().sum()\n",
        "\n",
        "# Print the number of duplicate hadm_id values\n",
        "print(\"Number of duplicate hadm_id values:\", duplicate_hadm_ids)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Number of duplicate hadm_id values: 3746\n"
        }
      ],
      "execution_count": 37,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107770333
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Keep only the rows with the earliest hadm_id\n",
        "sofa = sofa.drop_duplicates(subset=['hadm_id'], keep='first')"
      ],
      "outputs": [],
      "execution_count": 38,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107770567
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Incorporating Age, Gender, Height, Weight, and SOFA"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# add age and gender\n",
        "\n",
        "# Merge the 'merged_df' with the 'patients' dataframe on 'subject_id'\n",
        "merged_df = merged_df.merge(patients[['subject_id', 'anchor_age', 'gender']], on='subject_id', how='left')\n",
        "\n",
        "# Rename the 'anchor_age' column to 'age'\n",
        "merged_df.rename(columns={'anchor_age': 'age'}, inplace=True)\n",
        "\n",
        "merged_df\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 39,
          "data": {
            "text/plain": "       subject_id   hadm_id  pharmrestraintdays  physicalrestraintdays  \\\n0        10786070  29289999                 NaN                    NaN   \n1        13024347  21355222                 NaN                    NaN   \n2        13484152  21503453                 NaN                    NaN   \n3        13609009  22170101                 NaN                    NaN   \n4        13851330  21339457                 NaN                    NaN   \n...           ...       ...                 ...                    ...   \n68319    17660536  29997844                 0.0                    2.0   \n68320    17624950  29998113                 0.0                    1.0   \n68321    19989305  29998115                 0.0                    2.0   \n68322    15129243  29999098                 0.0                    9.0   \n68323    10355856  29999625                 0.0                   21.0   \n\n      restrainttype            admittime            dischtime  \\\n0              None  2113-01-22 00:00:00  2113-01-23 14:20:00   \n1              None  2143-11-13 06:22:00  2143-11-14 14:45:00   \n2              None  2121-10-29 00:00:00  2121-10-31 12:20:00   \n3              None  2187-07-24 20:35:00  2187-07-25 14:00:00   \n4              None  2181-09-29 08:09:00  2181-09-30 13:55:00   \n...             ...                  ...                  ...   \n68319      Physical  2125-02-16 20:10:00  2125-03-03 16:21:00   \n68320      Physical  2129-10-06 05:58:00  2129-10-10 13:00:00   \n68321      Physical  2154-05-06 03:02:00  2154-05-20 15:40:00   \n68322      Physical  2128-06-09 23:45:00  2128-06-20 11:25:00   \n68323      Physical  2157-11-07 11:18:00  2157-12-22 20:45:00   \n\n                 deathtime             race  hospital_expire_flag  \\\n0                      NaN            White                     0   \n1                      NaN            White                     0   \n2                      NaN            White                     0   \n3                      NaN            White                     0   \n4                      NaN  Hispanic/Latino                     0   \n...                    ...              ...                   ...   \n68319                  NaN            White                     0   \n68320                  NaN            White                     0   \n68321                  NaN            White                     0   \n68322  2128-06-20 11:25:00            White                     1   \n68323                  NaN            Other                     0   \n\n      restraint_status  age gender  \n0        No Restraints   54      M  \n1        No Restraints   66      F  \n2        No Restraints   63      F  \n3        No Restraints   89      F  \n4        No Restraints   43      M  \n...                ...  ...    ...  \n68319       Restraints   81      M  \n68320       Restraints   78      M  \n68321       Restraints   23      M  \n68322       Restraints   76      M  \n68323       Restraints   69      M  \n\n[68324 rows x 13 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>pharmrestraintdays</th>\n      <th>physicalrestraintdays</th>\n      <th>restrainttype</th>\n      <th>admittime</th>\n      <th>dischtime</th>\n      <th>deathtime</th>\n      <th>race</th>\n      <th>hospital_expire_flag</th>\n      <th>restraint_status</th>\n      <th>age</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10786070</td>\n      <td>29289999</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2113-01-22 00:00:00</td>\n      <td>2113-01-23 14:20:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>54</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>13024347</td>\n      <td>21355222</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2143-11-13 06:22:00</td>\n      <td>2143-11-14 14:45:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>13484152</td>\n      <td>21503453</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2121-10-29 00:00:00</td>\n      <td>2121-10-31 12:20:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13609009</td>\n      <td>22170101</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2187-07-24 20:35:00</td>\n      <td>2187-07-25 14:00:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>89</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13851330</td>\n      <td>21339457</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2181-09-29 08:09:00</td>\n      <td>2181-09-30 13:55:00</td>\n      <td>NaN</td>\n      <td>Hispanic/Latino</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>43</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>68319</th>\n      <td>17660536</td>\n      <td>29997844</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>Physical</td>\n      <td>2125-02-16 20:10:00</td>\n      <td>2125-03-03 16:21:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>Restraints</td>\n      <td>81</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>68320</th>\n      <td>17624950</td>\n      <td>29998113</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>Physical</td>\n      <td>2129-10-06 05:58:00</td>\n      <td>2129-10-10 13:00:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>Restraints</td>\n      <td>78</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>68321</th>\n      <td>19989305</td>\n      <td>29998115</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>Physical</td>\n      <td>2154-05-06 03:02:00</td>\n      <td>2154-05-20 15:40:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>Restraints</td>\n      <td>23</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>68322</th>\n      <td>15129243</td>\n      <td>29999098</td>\n      <td>0.0</td>\n      <td>9.0</td>\n      <td>Physical</td>\n      <td>2128-06-09 23:45:00</td>\n      <td>2128-06-20 11:25:00</td>\n      <td>2128-06-20 11:25:00</td>\n      <td>White</td>\n      <td>1</td>\n      <td>Restraints</td>\n      <td>76</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>68323</th>\n      <td>10355856</td>\n      <td>29999625</td>\n      <td>0.0</td>\n      <td>21.0</td>\n      <td>Physical</td>\n      <td>2157-11-07 11:18:00</td>\n      <td>2157-12-22 20:45:00</td>\n      <td>NaN</td>\n      <td>Other</td>\n      <td>0</td>\n      <td>Restraints</td>\n      <td>69</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n<p>68324 rows × 13 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 39,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107770804
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "merged2_df = merged_df.copy()"
      ],
      "outputs": [],
      "execution_count": 40,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107771045
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Adding Height\n",
        "\n",
        "# Merge the 'merged_df' with the 'height' dataframe on 'subject_id'\n",
        "merged2_df = merged2_df.merge(height[['subject_id', 'height']], on='subject_id', how='left')\n",
        "merged2_df"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 41,
          "data": {
            "text/plain": "        subject_id   hadm_id  pharmrestraintdays  physicalrestraintdays  \\\n0         10786070  29289999                 NaN                    NaN   \n1         10786070  29289999                 NaN                    NaN   \n2         13024347  21355222                 NaN                    NaN   \n3         13024347  21355222                 NaN                    NaN   \n4         13484152  21503453                 NaN                    NaN   \n...            ...       ...                 ...                    ...   \n128452    17660536  29997844                 0.0                    2.0   \n128453    17624950  29998113                 0.0                    1.0   \n128454    19989305  29998115                 0.0                    2.0   \n128455    15129243  29999098                 0.0                    9.0   \n128456    10355856  29999625                 0.0                   21.0   \n\n       restrainttype            admittime            dischtime  \\\n0               None  2113-01-22 00:00:00  2113-01-23 14:20:00   \n1               None  2113-01-22 00:00:00  2113-01-23 14:20:00   \n2               None  2143-11-13 06:22:00  2143-11-14 14:45:00   \n3               None  2143-11-13 06:22:00  2143-11-14 14:45:00   \n4               None  2121-10-29 00:00:00  2121-10-31 12:20:00   \n...              ...                  ...                  ...   \n128452      Physical  2125-02-16 20:10:00  2125-03-03 16:21:00   \n128453      Physical  2129-10-06 05:58:00  2129-10-10 13:00:00   \n128454      Physical  2154-05-06 03:02:00  2154-05-20 15:40:00   \n128455      Physical  2128-06-09 23:45:00  2128-06-20 11:25:00   \n128456      Physical  2157-11-07 11:18:00  2157-12-22 20:45:00   \n\n                  deathtime   race  hospital_expire_flag restraint_status  \\\n0                       NaN  White                     0    No Restraints   \n1                       NaN  White                     0    No Restraints   \n2                       NaN  White                     0    No Restraints   \n3                       NaN  White                     0    No Restraints   \n4                       NaN  White                     0    No Restraints   \n...                     ...    ...                   ...              ...   \n128452                  NaN  White                     0       Restraints   \n128453                  NaN  White                     0       Restraints   \n128454                  NaN  White                     0       Restraints   \n128455  2128-06-20 11:25:00  White                     1       Restraints   \n128456                  NaN  Other                     0       Restraints   \n\n        age gender  height  \n0        54      M     NaN  \n1        54      M     NaN  \n2        66      F     NaN  \n3        66      F     NaN  \n4        63      F     NaN  \n...     ...    ...     ...  \n128452   81      M   173.0  \n128453   78      M   175.0  \n128454   23      M   178.0  \n128455   76      M   168.0  \n128456   69      M   170.0  \n\n[128457 rows x 14 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>pharmrestraintdays</th>\n      <th>physicalrestraintdays</th>\n      <th>restrainttype</th>\n      <th>admittime</th>\n      <th>dischtime</th>\n      <th>deathtime</th>\n      <th>race</th>\n      <th>hospital_expire_flag</th>\n      <th>restraint_status</th>\n      <th>age</th>\n      <th>gender</th>\n      <th>height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10786070</td>\n      <td>29289999</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2113-01-22 00:00:00</td>\n      <td>2113-01-23 14:20:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>54</td>\n      <td>M</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10786070</td>\n      <td>29289999</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2113-01-22 00:00:00</td>\n      <td>2113-01-23 14:20:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>54</td>\n      <td>M</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>13024347</td>\n      <td>21355222</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2143-11-13 06:22:00</td>\n      <td>2143-11-14 14:45:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>66</td>\n      <td>F</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13024347</td>\n      <td>21355222</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2143-11-13 06:22:00</td>\n      <td>2143-11-14 14:45:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>66</td>\n      <td>F</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13484152</td>\n      <td>21503453</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2121-10-29 00:00:00</td>\n      <td>2121-10-31 12:20:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>63</td>\n      <td>F</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>128452</th>\n      <td>17660536</td>\n      <td>29997844</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>Physical</td>\n      <td>2125-02-16 20:10:00</td>\n      <td>2125-03-03 16:21:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>Restraints</td>\n      <td>81</td>\n      <td>M</td>\n      <td>173.0</td>\n    </tr>\n    <tr>\n      <th>128453</th>\n      <td>17624950</td>\n      <td>29998113</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>Physical</td>\n      <td>2129-10-06 05:58:00</td>\n      <td>2129-10-10 13:00:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>Restraints</td>\n      <td>78</td>\n      <td>M</td>\n      <td>175.0</td>\n    </tr>\n    <tr>\n      <th>128454</th>\n      <td>19989305</td>\n      <td>29998115</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>Physical</td>\n      <td>2154-05-06 03:02:00</td>\n      <td>2154-05-20 15:40:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>Restraints</td>\n      <td>23</td>\n      <td>M</td>\n      <td>178.0</td>\n    </tr>\n    <tr>\n      <th>128455</th>\n      <td>15129243</td>\n      <td>29999098</td>\n      <td>0.0</td>\n      <td>9.0</td>\n      <td>Physical</td>\n      <td>2128-06-09 23:45:00</td>\n      <td>2128-06-20 11:25:00</td>\n      <td>2128-06-20 11:25:00</td>\n      <td>White</td>\n      <td>1</td>\n      <td>Restraints</td>\n      <td>76</td>\n      <td>M</td>\n      <td>168.0</td>\n    </tr>\n    <tr>\n      <th>128456</th>\n      <td>10355856</td>\n      <td>29999625</td>\n      <td>0.0</td>\n      <td>21.0</td>\n      <td>Physical</td>\n      <td>2157-11-07 11:18:00</td>\n      <td>2157-12-22 20:45:00</td>\n      <td>NaN</td>\n      <td>Other</td>\n      <td>0</td>\n      <td>Restraints</td>\n      <td>69</td>\n      <td>M</td>\n      <td>170.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>128457 rows × 14 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 41,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107771337
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Adding height\n",
        "# Merge the 'merged_df' with the 'height' dataframe on 'subject_id'\n",
        "# merged_df = merged_df.merge(height[['subject_id', 'height']], on='subject_id', how='left')\n",
        "\n",
        "# Adding weight\n",
        "# Merge the 'merged_df' with the 'weight' dataframe on 'subject_id'\n",
        "merged_df2 = merged_df2.merge(weight[['subject_id', 'weight']], on='subject_id', how='left')\n",
        "\n",
        "# Calculating BSI\n",
        "# Convert height from cm to meters\n",
        "merged_df2['height_m'] = merged_df2['height'] / 100\n",
        "\n",
        "# Calculate body surface area using Du Bois formula\n",
        "merged_df2['BSA'] = 0.007184 * merged_df2['height'] ** 0.725 * merged_df['weight'] ** 0.425\n",
        "\n",
        "# Merge the 'merged_df' with the 'sofa' dataframe on 'subject_id'\n",
        "merged_df2 = merged_df2.merge(sofa[['subject_id', 'SOFA']], on='hadm_id', how='left')\n",
        "\n",
        "# Remove duplicates and save \n",
        "\n",
        "merged_df2"
      ],
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "'height'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "File \u001b[0;32m/anaconda/envs/azureml_py38/lib/python3.8/site-packages/pandas/core/indexes/base.py:2898\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2897\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 2898\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2899\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
            "File \u001b[0;32mpandas/_libs/index.pyx:70\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "File \u001b[0;32mpandas/_libs/index.pyx:101\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:1675\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:1683\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'height'",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[42], line 11\u001b[0m\n\u001b[1;32m      7\u001b[0m merged_df \u001b[38;5;241m=\u001b[39m merged_df\u001b[38;5;241m.\u001b[39mmerge(weight[[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msubject_id\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mweight\u001b[39m\u001b[38;5;124m'\u001b[39m]], on\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msubject_id\u001b[39m\u001b[38;5;124m'\u001b[39m, how\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mleft\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      9\u001b[0m \u001b[38;5;66;03m# Calculating BSI\u001b[39;00m\n\u001b[1;32m     10\u001b[0m \u001b[38;5;66;03m# Convert height from cm to meters\u001b[39;00m\n\u001b[0;32m---> 11\u001b[0m merged_df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mheight_m\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mmerged_df\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mheight\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m100\u001b[39m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;66;03m# Calculate body surface area using Du Bois formula\u001b[39;00m\n\u001b[1;32m     14\u001b[0m merged_df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mBSA\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0.007184\u001b[39m \u001b[38;5;241m*\u001b[39m merged_df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mheight\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m \u001b[38;5;241m0.725\u001b[39m \u001b[38;5;241m*\u001b[39m merged_df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mweight\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m \u001b[38;5;241m0.425\u001b[39m\n",
            "File \u001b[0;32m/anaconda/envs/azureml_py38/lib/python3.8/site-packages/pandas/core/frame.py:2906\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2904\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   2905\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[0;32m-> 2906\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2907\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[1;32m   2908\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
            "File \u001b[0;32m/anaconda/envs/azureml_py38/lib/python3.8/site-packages/pandas/core/indexes/base.py:2900\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2898\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[1;32m   2899\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[0;32m-> 2900\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   2902\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m tolerance \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   2903\u001b[0m     tolerance \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_convert_tolerance(tolerance, np\u001b[38;5;241m.\u001b[39masarray(key))\n",
            "\u001b[0;31mKeyError\u001b[0m: 'height'"
          ]
        }
      ],
      "execution_count": 42,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107771616
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "merged_df.to_csv('finaldf.csv')"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107771987
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install tableone -U"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip list"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import numerical libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy import stats\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107772014
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import tableone\n",
        "try:\n",
        "    from tableone import TableOne, load_dataset\n",
        "except (ModuleNotFoundError, ImportError):\n",
        "    # install on Colab\n",
        "    !pip install tableone\n",
        "    from tableone import TableOne, load_dataset"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107772033
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "merged_df.head()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713107772057
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "kernel_info": {
      "name": "python38-azureml"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}