{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "finaldf = pd.read_csv('finaldf.csv')\n",
        "finaldf.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 56,
          "data": {
            "text/plain": "   Unnamed: 0  subject_id   hadm_id  pharmrestraintdays  \\\n0           0    10786070  29289999                 NaN   \n1           1    13024347  21355222                 NaN   \n2           2    13484152  21503453                 NaN   \n3           3    13609009  22170101                 NaN   \n4           4    13851330  21339457                 NaN   \n\n   physicalrestraintdays  restrainttype            admittime  \\\n0                    NaN  No Restraints  2113-01-22 00:00:00   \n1                    NaN  No Restraints  2143-11-13 06:22:00   \n2                    NaN  No Restraints  2121-10-29 00:00:00   \n3                    NaN  No Restraints  2187-07-24 20:35:00   \n4                    NaN  No Restraints  2181-09-29 08:09:00   \n\n             dischtime deathtime             race  hospital_expire_flag  \\\n0  2113-01-23 14:20:00       NaN            White                     0   \n1  2143-11-14 14:45:00       NaN            White                     0   \n2  2121-10-31 12:20:00       NaN            White                     0   \n3  2187-07-25 14:00:00       NaN            White                     0   \n4  2181-09-30 13:55:00       NaN  Hispanic/Latino                     0   \n\n  restraint_status  age gender  height  weight        BMI  SOFA  \n0    No Restraints   54      M     NaN    75.0        NaN     1  \n1    No Restraints   66      F     NaN    86.0        NaN     1  \n2    No Restraints   63      F     NaN    63.5        NaN     1  \n3    No Restraints   89      F   163.0    52.3  19.684595     4  \n4    No Restraints   43      M   178.0    95.4  30.109835     0  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>pharmrestraintdays</th>\n      <th>physicalrestraintdays</th>\n      <th>restrainttype</th>\n      <th>admittime</th>\n      <th>dischtime</th>\n      <th>deathtime</th>\n      <th>race</th>\n      <th>hospital_expire_flag</th>\n      <th>restraint_status</th>\n      <th>age</th>\n      <th>gender</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>BMI</th>\n      <th>SOFA</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>10786070</td>\n      <td>29289999</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>No Restraints</td>\n      <td>2113-01-22 00:00:00</td>\n      <td>2113-01-23 14:20:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>54</td>\n      <td>M</td>\n      <td>NaN</td>\n      <td>75.0</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>13024347</td>\n      <td>21355222</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>No Restraints</td>\n      <td>2143-11-13 06:22:00</td>\n      <td>2143-11-14 14:45:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>66</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>86.0</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>13484152</td>\n      <td>21503453</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>No Restraints</td>\n      <td>2121-10-29 00:00:00</td>\n      <td>2121-10-31 12:20:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>63</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>63.5</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>13609009</td>\n      <td>22170101</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>No Restraints</td>\n      <td>2187-07-24 20:35:00</td>\n      <td>2187-07-25 14:00:00</td>\n      <td>NaN</td>\n      <td>White</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>89</td>\n      <td>F</td>\n      <td>163.0</td>\n      <td>52.3</td>\n      <td>19.684595</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>13851330</td>\n      <td>21339457</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>No Restraints</td>\n      <td>2181-09-29 08:09:00</td>\n      <td>2181-09-30 13:55:00</td>\n      <td>NaN</td>\n      <td>Hispanic/Latino</td>\n      <td>0</td>\n      <td>No Restraints</td>\n      <td>43</td>\n      <td>M</td>\n      <td>178.0</td>\n      <td>95.4</td>\n      <td>30.109835</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 56,
      "metadata": {
        "gather": {
          "logged": 1713116513765
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "finaldf['restraint_status'] = finaldf['restraint_status'].map({'Restraints': 1, 'No Restraints': 0})\n",
        "finaldf['gender'] = finaldf['gender'].map({'M': 1, 'F': 0})\n",
        "\n",
        "finaldf['gender'].value_counts()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 57,
          "data": {
            "text/plain": "gender\n1    32506\n0    25904\nName: count, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 57,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713116516599
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "finaldf['restraint_status'].value_counts()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 58,
          "data": {
            "text/plain": "restraint_status\n1    29462\n0    28948\nName: count, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 58,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713116519177
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# One-hot encoding on race\n",
        "finaldf = pd.get_dummies(finaldf, columns=['race'])\n",
        "finaldf.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 59,
          "data": {
            "text/plain": "   Unnamed: 0  subject_id   hadm_id  pharmrestraintdays  \\\n0           0    10786070  29289999                 NaN   \n1           1    13024347  21355222                 NaN   \n2           2    13484152  21503453                 NaN   \n3           3    13609009  22170101                 NaN   \n4           4    13851330  21339457                 NaN   \n\n   physicalrestraintdays  restrainttype            admittime  \\\n0                    NaN  No Restraints  2113-01-22 00:00:00   \n1                    NaN  No Restraints  2143-11-13 06:22:00   \n2                    NaN  No Restraints  2121-10-29 00:00:00   \n3                    NaN  No Restraints  2187-07-24 20:35:00   \n4                    NaN  No Restraints  2181-09-29 08:09:00   \n\n             dischtime deathtime  hospital_expire_flag  ...  weight  \\\n0  2113-01-23 14:20:00       NaN                     0  ...    75.0   \n1  2143-11-14 14:45:00       NaN                     0  ...    86.0   \n2  2121-10-31 12:20:00       NaN                     0  ...    63.5   \n3  2187-07-25 14:00:00       NaN                     0  ...    52.3   \n4  2181-09-30 13:55:00       NaN                     0  ...    95.4   \n\n         BMI  SOFA  race_American Indian/Alaska Native  race_Asian  \\\n0        NaN     1                               False       False   \n1        NaN     1                               False       False   \n2        NaN     1                               False       False   \n3  19.684595     4                               False       False   \n4  30.109835     0                               False       False   \n\n   race_Black/African American  race_Hispanic/Latino  \\\n0                        False                 False   \n1                        False                 False   \n2                        False                 False   \n3                        False                 False   \n4                        False                  True   \n\n   race_Native Hawaiian or Other Pacific Islander  race_Other  race_White  \n0                                           False       False        True  \n1                                           False       False        True  \n2                                           False       False        True  \n3                                           False       False        True  \n4                                           False       False       False  \n\n[5 rows x 24 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>subject_id</th>\n      <th>hadm_id</th>\n      <th>pharmrestraintdays</th>\n      <th>physicalrestraintdays</th>\n      <th>restrainttype</th>\n      <th>admittime</th>\n      <th>dischtime</th>\n      <th>deathtime</th>\n      <th>hospital_expire_flag</th>\n      <th>...</th>\n      <th>weight</th>\n      <th>BMI</th>\n      <th>SOFA</th>\n      <th>race_American Indian/Alaska Native</th>\n      <th>race_Asian</th>\n      <th>race_Black/African American</th>\n      <th>race_Hispanic/Latino</th>\n      <th>race_Native Hawaiian or Other Pacific Islander</th>\n      <th>race_Other</th>\n      <th>race_White</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>10786070</td>\n      <td>29289999</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>No Restraints</td>\n      <td>2113-01-22 00:00:00</td>\n      <td>2113-01-23 14:20:00</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>...</td>\n      <td>75.0</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>13024347</td>\n      <td>21355222</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>No Restraints</td>\n      <td>2143-11-13 06:22:00</td>\n      <td>2143-11-14 14:45:00</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>...</td>\n      <td>86.0</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>13484152</td>\n      <td>21503453</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>No Restraints</td>\n      <td>2121-10-29 00:00:00</td>\n      <td>2121-10-31 12:20:00</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>...</td>\n      <td>63.5</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>13609009</td>\n      <td>22170101</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>No Restraints</td>\n      <td>2187-07-24 20:35:00</td>\n      <td>2187-07-25 14:00:00</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>...</td>\n      <td>52.3</td>\n      <td>19.684595</td>\n      <td>4</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>13851330</td>\n      <td>21339457</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>No Restraints</td>\n      <td>2181-09-29 08:09:00</td>\n      <td>2181-09-30 13:55:00</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>...</td>\n      <td>95.4</td>\n      <td>30.109835</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 24 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 59,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713116521206
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "X = finaldf[['restraint_status','race_American Indian/Alaska Native', 'race_Asian', 'race_Black/African American', 'race_Hispanic/Latino', 'race_Native Hawaiian or Other Pacific Islander', 'race_Other', 'race_White', 'age', 'gender', 'SOFA', 'weight']]\n",
        "X = X.dropna()\n",
        "\n",
        "y = X['restraint_status']\n",
        "X.drop('restraint_status', axis=1, inplace=True)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X['weight'] = scaler.fit_transform(X[['weight']])\n",
        "X['age'] = scaler.fit_transform(X[['age']])\n",
        "X.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 60,
          "data": {
            "text/plain": "   race_American Indian/Alaska Native  race_Asian  \\\n0                               False       False   \n1                               False       False   \n2                               False       False   \n3                               False       False   \n4                               False       False   \n\n   race_Black/African American  race_Hispanic/Latino  \\\n0                        False                 False   \n1                        False                 False   \n2                        False                 False   \n3                        False                 False   \n4                        False                  True   \n\n   race_Native Hawaiian or Other Pacific Islander  race_Other  race_White  \\\n0                                           False       False        True   \n1                                           False       False        True   \n2                                           False       False        True   \n3                                           False       False        True   \n4                                           False       False       False   \n\n        age  gender  SOFA    weight  \n0 -0.545955       1     1 -0.185599  \n1  0.152504       0     1  0.123840  \n2 -0.022111       0     1 -0.509103  \n3  1.491217       0     4 -0.824168  \n4 -1.186209       1     0  0.388269  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>race_American Indian/Alaska Native</th>\n      <th>race_Asian</th>\n      <th>race_Black/African American</th>\n      <th>race_Hispanic/Latino</th>\n      <th>race_Native Hawaiian or Other Pacific Islander</th>\n      <th>race_Other</th>\n      <th>race_White</th>\n      <th>age</th>\n      <th>gender</th>\n      <th>SOFA</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>-0.545955</td>\n      <td>1</td>\n      <td>1</td>\n      <td>-0.185599</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>0.152504</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.123840</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>-0.022111</td>\n      <td>0</td>\n      <td>1</td>\n      <td>-0.509103</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1.491217</td>\n      <td>0</td>\n      <td>4</td>\n      <td>-0.824168</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>-1.186209</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0.388269</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 60,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713116524598
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "lr = LogisticRegression().fit(X, y)\n",
        "lr.score(X, y)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 61,
          "data": {
            "text/plain": "0.6605614391411577"
          },
          "metadata": {}
        }
      ],
      "execution_count": 61,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713116528663
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "coefficients = lr.coef_[0]\n",
        "feature_names = X.columns\n",
        "\n",
        "# Create a DataFrame for better visualization\n",
        "coef_df = pd.DataFrame({\n",
        "    'Feature': feature_names,\n",
        "    'Coefficient': coefficients\n",
        "})\n",
        "\n",
        "sorted_coef_df = coef_df.sort_values(by='Coefficient', ascending=False)\n",
        "print(sorted_coef_df)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "                                           Feature  Coefficient\n5                                       race_Other     0.335746\n9                                             SOFA     0.238836\n8                                           gender     0.191717\n10                                          weight     0.062215\n4   race_Native Hawaiian or Other Pacific Islander     0.017068\n6                                       race_White    -0.105603\n7                                              age    -0.106503\n3                             race_Hispanic/Latino    -0.199121\n1                                       race_Asian    -0.289700\n0               race_American Indian/Alaska Native    -0.312022\n2                      race_Black/African American    -0.429148\n"
        }
      ],
      "execution_count": 62,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713116531194
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "import numpy as np\n",
        "\n",
        "est = sm.OLS(y, X.astype(float)).fit()\n",
        "print(est.summary())"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "                            OLS Regression Results                            \n==============================================================================\nDep. Variable:       restraint_status   R-squared:                       0.125\nModel:                            OLS   Adj. R-squared:                  0.124\nMethod:                 Least Squares   F-statistic:                     785.2\nDate:                Sun, 14 Apr 2024   Prob (F-statistic):               0.00\nTime:                        17:46:46   Log-Likelihood:                -36351.\nNo. Observations:               55144   AIC:                         7.272e+04\nDf Residuals:                   55133   BIC:                         7.282e+04\nDf Model:                          10                                         \nCovariance Type:            nonrobust                                         \n==================================================================================================================\n                                                     coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------------------------------------------\nconst                                              0.2159      0.010     22.680      0.000       0.197       0.235\nrace_American Indian/Alaska Native                -0.0055      0.042     -0.132      0.895      -0.088       0.077\nrace_Asian                                        -0.0060      0.013     -0.446      0.656      -0.032       0.020\nrace_Black/African American                       -0.0306      0.011     -2.886      0.004      -0.051      -0.010\nrace_Hispanic/Latino                               0.0170      0.013      1.324      0.186      -0.008       0.042\nrace_Native Hawaiian or Other Pacific Islander     0.0714      0.046      1.565      0.118      -0.018       0.161\nrace_Other                                         0.1314      0.010     13.050      0.000       0.112       0.151\nrace_White                                         0.0382      0.009      4.116      0.000       0.020       0.056\nage                                               -0.0212      0.002    -10.328      0.000      -0.025      -0.017\ngender                                             0.0460      0.004     11.208      0.000       0.038       0.054\nSOFA                                               0.0491      0.001     82.063      0.000       0.048       0.050\nweight                                             0.0087      0.002      4.261      0.000       0.005       0.013\n==============================================================================\nOmnibus:                   321638.794   Durbin-Watson:                   0.242\nProb(Omnibus):                  0.000   Jarque-Bera (JB):             5276.609\nSkew:                           0.049   Prob(JB):                         0.00\nKurtosis:                       1.488   Cond. No.                     4.28e+15\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The smallest eigenvalue is 9.32e-26. This might indicate that there are\nstrong multicollinearity problems or that the design matrix is singular.\n"
        }
      ],
      "execution_count": 65,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1713116805907
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
<<<<<<< HEAD
        "# Get the coefficients from the model\n",
        "coefficients = est.params\n",
        "\n",
        "# Exponentiate the coefficients to get odds ratios\n",
        "odds_ratios = np.exp(coefficients)\n",
        "\n",
        "print(odds_ratios)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "const                                             1.240979\nrace_American Indian/Alaska Native                0.994502\nrace_Asian                                        0.994005\nrace_Black/African American                       0.969879\nrace_Hispanic/Latino                              1.017117\nrace_Native Hawaiian or Other Pacific Islander    1.074035\nrace_Other                                        1.140426\nrace_White                                        1.038953\nage                                               0.979040\ngender                                            1.047110\nSOFA                                              1.050362\nweight                                            1.008757\ndtype: float64\n"
        }
      ],
      "execution_count": 70,
=======
        "est._results"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 69,
          "data": {
            "text/plain": "<statsmodels.regression.linear_model.OLSResults at 0x7f72af477610>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 69,
>>>>>>> 8cbba47 (results2)
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
<<<<<<< HEAD
          "logged": 1713117356531
=======
          "logged": 1713117172590
>>>>>>> 8cbba47 (results2)
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python310-sdkv2",
      "language": "python",
      "display_name": "Python 3.10 - SDK v2"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.11",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "kernel_info": {
      "name": "python310-sdkv2"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}